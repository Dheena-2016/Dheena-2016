{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U8kVu_3fX1aE"
      },
      "source": [
        "# Introduction - Transfer learning : Federated-Learning with machine learning for Credit-card-fraud-detection\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f_f2U_qJX1aI"
      },
      "source": [
        "# Importing the required Python libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:23.942908Z",
          "start_time": "2019-09-19T18:31:19.696764Z"
        },
        "id": "jopqQrM9X1aJ"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "import os\n",
        "import random\n",
        "from tqdm import tqdm\n",
        "import numpy as np\n",
        "import torch, torchvision\n",
        "import torch as T\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "import torch.optim as optim\n",
        "from torchvision import datasets, transforms\n",
        "from torch.utils.data.dataset import Dataset \n",
        "from numpy import vstack\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix\n",
        "from torch.optim import SGD\n",
        "from torch.nn import BCELoss \n",
        "\n",
        "%matplotlib inline\n",
        "sns.set()\n",
        "warnings.simplefilter('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gOa1ioaxcMyP",
        "outputId": "31693d8f-a41f-4ade-c75a-301dceb4ec16"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-cnn2NdEX1aK"
      },
      "source": [
        "# Data Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5We4SLqUX1aK"
      },
      "source": [
        "Let's get the dataset into a pandas dataframe."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:36.105763Z",
          "start_time": "2019-09-19T18:31:23.942908Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "Al30gMwRX1aL",
        "outputId": "8177b63a-6b0e-4468-da09-92dadc691e93"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
              "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
              "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
              "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
              "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
              "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
              "\n",
              "         V8        V9  ...       V21       V22       V23       V24       V25  \\\n",
              "0  0.098698  0.363787  ... -0.018307  0.277838 -0.110474  0.066928  0.128539   \n",
              "1  0.085102 -0.255425  ... -0.225775 -0.638672  0.101288 -0.339846  0.167170   \n",
              "2  0.247676 -1.514654  ...  0.247998  0.771679  0.909412 -0.689281 -0.327642   \n",
              "3  0.377436 -1.387024  ... -0.108300  0.005274 -0.190321 -1.175575  0.647376   \n",
              "4 -0.270533  0.817739  ... -0.009431  0.798278 -0.137458  0.141267 -0.206010   \n",
              "\n",
              "        V26       V27       V28  Amount  Class  \n",
              "0 -0.189115  0.133558 -0.021053  149.62      0  \n",
              "1  0.125895 -0.008983  0.014724    2.69      0  \n",
              "2 -0.139097 -0.055353 -0.059752  378.66      0  \n",
              "3 -0.221929  0.062723  0.061458  123.50      0  \n",
              "4  0.502292  0.219422  0.215153   69.99      0  \n",
              "\n",
              "[5 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17716667-fb8f-46ed-bc76-71336586b4a1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.018307</td>\n",
              "      <td>0.277838</td>\n",
              "      <td>-0.110474</td>\n",
              "      <td>0.066928</td>\n",
              "      <td>0.128539</td>\n",
              "      <td>-0.189115</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>-0.021053</td>\n",
              "      <td>149.62</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.225775</td>\n",
              "      <td>-0.638672</td>\n",
              "      <td>0.101288</td>\n",
              "      <td>-0.339846</td>\n",
              "      <td>0.167170</td>\n",
              "      <td>0.125895</td>\n",
              "      <td>-0.008983</td>\n",
              "      <td>0.014724</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>...</td>\n",
              "      <td>0.247998</td>\n",
              "      <td>0.771679</td>\n",
              "      <td>0.909412</td>\n",
              "      <td>-0.689281</td>\n",
              "      <td>-0.327642</td>\n",
              "      <td>-0.139097</td>\n",
              "      <td>-0.055353</td>\n",
              "      <td>-0.059752</td>\n",
              "      <td>378.66</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.108300</td>\n",
              "      <td>0.005274</td>\n",
              "      <td>-0.190321</td>\n",
              "      <td>-1.175575</td>\n",
              "      <td>0.647376</td>\n",
              "      <td>-0.221929</td>\n",
              "      <td>0.062723</td>\n",
              "      <td>0.061458</td>\n",
              "      <td>123.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.009431</td>\n",
              "      <td>0.798278</td>\n",
              "      <td>-0.137458</td>\n",
              "      <td>0.141267</td>\n",
              "      <td>-0.206010</td>\n",
              "      <td>0.502292</td>\n",
              "      <td>0.219422</td>\n",
              "      <td>0.215153</td>\n",
              "      <td>69.99</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 31 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17716667-fb8f-46ed-bc76-71336586b4a1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-17716667-fb8f-46ed-bc76-71336586b4a1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-17716667-fb8f-46ed-bc76-71336586b4a1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "data = pd.read_csv('/content/drive/MyDrive/sanjay/creditcard.csv')\n",
        "df = data.copy() # To keep the data as backup\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:36.116220Z",
          "start_time": "2019-09-19T18:31:36.107243Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p1z0iYrlX1aM",
        "outputId": "a08520e2-3e3f-43a8-bcf9-a4f9c61cb760"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(284807, 31)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:36.296124Z",
          "start_time": "2019-09-19T18:31:36.118213Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_3Fsg0kqX1aM",
        "outputId": "0e6d7744-ab0f-4894-b308-74dc17cd9b9f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Time      0\n",
              "V1        0\n",
              "V2        0\n",
              "V3        0\n",
              "V4        0\n",
              "V5        0\n",
              "V6        0\n",
              "V7        0\n",
              "V8        0\n",
              "V9        0\n",
              "V10       0\n",
              "V11       0\n",
              "V12       0\n",
              "V13       0\n",
              "V14       0\n",
              "V15       0\n",
              "V16       0\n",
              "V17       0\n",
              "V18       0\n",
              "V19       0\n",
              "V20       0\n",
              "V21       0\n",
              "V22       0\n",
              "V23       0\n",
              "V24       0\n",
              "V25       0\n",
              "V26       0\n",
              "V27       0\n",
              "V28       0\n",
              "Amount    0\n",
              "Class     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:36.308240Z",
          "start_time": "2019-09-19T18:31:36.300262Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oF0NdnVOX1aN",
        "outputId": "a1d21b9c-a9ba-45fa-802c-610a70576729"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Time      float64\n",
              "V1        float64\n",
              "V2        float64\n",
              "V3        float64\n",
              "V4        float64\n",
              "V5        float64\n",
              "V6        float64\n",
              "V7        float64\n",
              "V8        float64\n",
              "V9        float64\n",
              "V10       float64\n",
              "V11       float64\n",
              "V12       float64\n",
              "V13       float64\n",
              "V14       float64\n",
              "V15       float64\n",
              "V16       float64\n",
              "V17       float64\n",
              "V18       float64\n",
              "V19       float64\n",
              "V20       float64\n",
              "V21       float64\n",
              "V22       float64\n",
              "V23       float64\n",
              "V24       float64\n",
              "V25       float64\n",
              "V26       float64\n",
              "V27       float64\n",
              "V28       float64\n",
              "Amount    float64\n",
              "Class       int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:36.326205Z",
          "start_time": "2019-09-19T18:31:36.315240Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "suiKuSPaX1aN",
        "outputId": "caff783f-ade2-4182-94c7-b380543efc85"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "284792    172774.0\n",
              "284793    172775.0\n",
              "284794    172777.0\n",
              "284795    172778.0\n",
              "284796    172780.0\n",
              "284797    172782.0\n",
              "284798    172782.0\n",
              "284799    172783.0\n",
              "284800    172784.0\n",
              "284801    172785.0\n",
              "284802    172786.0\n",
              "284803    172787.0\n",
              "284804    172788.0\n",
              "284805    172788.0\n",
              "284806    172792.0\n",
              "Name: Time, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "df.Time.tail(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:37.284064Z",
          "start_time": "2019-09-19T18:31:36.334169Z"
        },
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "2A2MWwaBX1aN",
        "outputId": "d22a6384-71de-4cd4-dd40-40940565e75d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                Time            V1            V2            V3            V4  \\\n",
              "count  284807.000000  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
              "mean    94813.859575  1.168375e-15  3.416908e-16 -1.379537e-15  2.074095e-15   \n",
              "std     47488.145955  1.958696e+00  1.651309e+00  1.516255e+00  1.415869e+00   \n",
              "min         0.000000 -5.640751e+01 -7.271573e+01 -4.832559e+01 -5.683171e+00   \n",
              "25%     54201.500000 -9.203734e-01 -5.985499e-01 -8.903648e-01 -8.486401e-01   \n",
              "50%     84692.000000  1.810880e-02  6.548556e-02  1.798463e-01 -1.984653e-02   \n",
              "75%    139320.500000  1.315642e+00  8.037239e-01  1.027196e+00  7.433413e-01   \n",
              "max    172792.000000  2.454930e+00  2.205773e+01  9.382558e+00  1.687534e+01   \n",
              "\n",
              "                 V5            V6            V7            V8            V9  \\\n",
              "count  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
              "mean   9.604066e-16  1.487313e-15 -5.556467e-16  1.213481e-16 -2.406331e-15   \n",
              "std    1.380247e+00  1.332271e+00  1.237094e+00  1.194353e+00  1.098632e+00   \n",
              "min   -1.137433e+02 -2.616051e+01 -4.355724e+01 -7.321672e+01 -1.343407e+01   \n",
              "25%   -6.915971e-01 -7.682956e-01 -5.540759e-01 -2.086297e-01 -6.430976e-01   \n",
              "50%   -5.433583e-02 -2.741871e-01  4.010308e-02  2.235804e-02 -5.142873e-02   \n",
              "75%    6.119264e-01  3.985649e-01  5.704361e-01  3.273459e-01  5.971390e-01   \n",
              "max    3.480167e+01  7.330163e+01  1.205895e+02  2.000721e+01  1.559499e+01   \n",
              "\n",
              "       ...           V21           V22           V23           V24  \\\n",
              "count  ...  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05   \n",
              "mean   ...  1.654067e-16 -3.568593e-16  2.578648e-16  4.473266e-15   \n",
              "std    ...  7.345240e-01  7.257016e-01  6.244603e-01  6.056471e-01   \n",
              "min    ... -3.483038e+01 -1.093314e+01 -4.480774e+01 -2.836627e+00   \n",
              "25%    ... -2.283949e-01 -5.423504e-01 -1.618463e-01 -3.545861e-01   \n",
              "50%    ... -2.945017e-02  6.781943e-03 -1.119293e-02  4.097606e-02   \n",
              "75%    ...  1.863772e-01  5.285536e-01  1.476421e-01  4.395266e-01   \n",
              "max    ...  2.720284e+01  1.050309e+01  2.252841e+01  4.584549e+00   \n",
              "\n",
              "                V25           V26           V27           V28         Amount  \\\n",
              "count  2.848070e+05  2.848070e+05  2.848070e+05  2.848070e+05  284807.000000   \n",
              "mean   5.340915e-16  1.683437e-15 -3.660091e-16 -1.227390e-16      88.349619   \n",
              "std    5.212781e-01  4.822270e-01  4.036325e-01  3.300833e-01     250.120109   \n",
              "min   -1.029540e+01 -2.604551e+00 -2.256568e+01 -1.543008e+01       0.000000   \n",
              "25%   -3.171451e-01 -3.269839e-01 -7.083953e-02 -5.295979e-02       5.600000   \n",
              "50%    1.659350e-02 -5.213911e-02  1.342146e-03  1.124383e-02      22.000000   \n",
              "75%    3.507156e-01  2.409522e-01  9.104512e-02  7.827995e-02      77.165000   \n",
              "max    7.519589e+00  3.517346e+00  3.161220e+01  3.384781e+01   25691.160000   \n",
              "\n",
              "               Class  \n",
              "count  284807.000000  \n",
              "mean        0.001727  \n",
              "std         0.041527  \n",
              "min         0.000000  \n",
              "25%         0.000000  \n",
              "50%         0.000000  \n",
              "75%         0.000000  \n",
              "max         1.000000  \n",
              "\n",
              "[8 rows x 31 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-be2be3af-430d-4b67-b8da-b09fbad47601\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>284807.000000</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>...</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>284807.000000</td>\n",
              "      <td>284807.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>94813.859575</td>\n",
              "      <td>1.168375e-15</td>\n",
              "      <td>3.416908e-16</td>\n",
              "      <td>-1.379537e-15</td>\n",
              "      <td>2.074095e-15</td>\n",
              "      <td>9.604066e-16</td>\n",
              "      <td>1.487313e-15</td>\n",
              "      <td>-5.556467e-16</td>\n",
              "      <td>1.213481e-16</td>\n",
              "      <td>-2.406331e-15</td>\n",
              "      <td>...</td>\n",
              "      <td>1.654067e-16</td>\n",
              "      <td>-3.568593e-16</td>\n",
              "      <td>2.578648e-16</td>\n",
              "      <td>4.473266e-15</td>\n",
              "      <td>5.340915e-16</td>\n",
              "      <td>1.683437e-15</td>\n",
              "      <td>-3.660091e-16</td>\n",
              "      <td>-1.227390e-16</td>\n",
              "      <td>88.349619</td>\n",
              "      <td>0.001727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>47488.145955</td>\n",
              "      <td>1.958696e+00</td>\n",
              "      <td>1.651309e+00</td>\n",
              "      <td>1.516255e+00</td>\n",
              "      <td>1.415869e+00</td>\n",
              "      <td>1.380247e+00</td>\n",
              "      <td>1.332271e+00</td>\n",
              "      <td>1.237094e+00</td>\n",
              "      <td>1.194353e+00</td>\n",
              "      <td>1.098632e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>7.345240e-01</td>\n",
              "      <td>7.257016e-01</td>\n",
              "      <td>6.244603e-01</td>\n",
              "      <td>6.056471e-01</td>\n",
              "      <td>5.212781e-01</td>\n",
              "      <td>4.822270e-01</td>\n",
              "      <td>4.036325e-01</td>\n",
              "      <td>3.300833e-01</td>\n",
              "      <td>250.120109</td>\n",
              "      <td>0.041527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>-5.640751e+01</td>\n",
              "      <td>-7.271573e+01</td>\n",
              "      <td>-4.832559e+01</td>\n",
              "      <td>-5.683171e+00</td>\n",
              "      <td>-1.137433e+02</td>\n",
              "      <td>-2.616051e+01</td>\n",
              "      <td>-4.355724e+01</td>\n",
              "      <td>-7.321672e+01</td>\n",
              "      <td>-1.343407e+01</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.483038e+01</td>\n",
              "      <td>-1.093314e+01</td>\n",
              "      <td>-4.480774e+01</td>\n",
              "      <td>-2.836627e+00</td>\n",
              "      <td>-1.029540e+01</td>\n",
              "      <td>-2.604551e+00</td>\n",
              "      <td>-2.256568e+01</td>\n",
              "      <td>-1.543008e+01</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>54201.500000</td>\n",
              "      <td>-9.203734e-01</td>\n",
              "      <td>-5.985499e-01</td>\n",
              "      <td>-8.903648e-01</td>\n",
              "      <td>-8.486401e-01</td>\n",
              "      <td>-6.915971e-01</td>\n",
              "      <td>-7.682956e-01</td>\n",
              "      <td>-5.540759e-01</td>\n",
              "      <td>-2.086297e-01</td>\n",
              "      <td>-6.430976e-01</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.283949e-01</td>\n",
              "      <td>-5.423504e-01</td>\n",
              "      <td>-1.618463e-01</td>\n",
              "      <td>-3.545861e-01</td>\n",
              "      <td>-3.171451e-01</td>\n",
              "      <td>-3.269839e-01</td>\n",
              "      <td>-7.083953e-02</td>\n",
              "      <td>-5.295979e-02</td>\n",
              "      <td>5.600000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>84692.000000</td>\n",
              "      <td>1.810880e-02</td>\n",
              "      <td>6.548556e-02</td>\n",
              "      <td>1.798463e-01</td>\n",
              "      <td>-1.984653e-02</td>\n",
              "      <td>-5.433583e-02</td>\n",
              "      <td>-2.741871e-01</td>\n",
              "      <td>4.010308e-02</td>\n",
              "      <td>2.235804e-02</td>\n",
              "      <td>-5.142873e-02</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.945017e-02</td>\n",
              "      <td>6.781943e-03</td>\n",
              "      <td>-1.119293e-02</td>\n",
              "      <td>4.097606e-02</td>\n",
              "      <td>1.659350e-02</td>\n",
              "      <td>-5.213911e-02</td>\n",
              "      <td>1.342146e-03</td>\n",
              "      <td>1.124383e-02</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>139320.500000</td>\n",
              "      <td>1.315642e+00</td>\n",
              "      <td>8.037239e-01</td>\n",
              "      <td>1.027196e+00</td>\n",
              "      <td>7.433413e-01</td>\n",
              "      <td>6.119264e-01</td>\n",
              "      <td>3.985649e-01</td>\n",
              "      <td>5.704361e-01</td>\n",
              "      <td>3.273459e-01</td>\n",
              "      <td>5.971390e-01</td>\n",
              "      <td>...</td>\n",
              "      <td>1.863772e-01</td>\n",
              "      <td>5.285536e-01</td>\n",
              "      <td>1.476421e-01</td>\n",
              "      <td>4.395266e-01</td>\n",
              "      <td>3.507156e-01</td>\n",
              "      <td>2.409522e-01</td>\n",
              "      <td>9.104512e-02</td>\n",
              "      <td>7.827995e-02</td>\n",
              "      <td>77.165000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>172792.000000</td>\n",
              "      <td>2.454930e+00</td>\n",
              "      <td>2.205773e+01</td>\n",
              "      <td>9.382558e+00</td>\n",
              "      <td>1.687534e+01</td>\n",
              "      <td>3.480167e+01</td>\n",
              "      <td>7.330163e+01</td>\n",
              "      <td>1.205895e+02</td>\n",
              "      <td>2.000721e+01</td>\n",
              "      <td>1.559499e+01</td>\n",
              "      <td>...</td>\n",
              "      <td>2.720284e+01</td>\n",
              "      <td>1.050309e+01</td>\n",
              "      <td>2.252841e+01</td>\n",
              "      <td>4.584549e+00</td>\n",
              "      <td>7.519589e+00</td>\n",
              "      <td>3.517346e+00</td>\n",
              "      <td>3.161220e+01</td>\n",
              "      <td>3.384781e+01</td>\n",
              "      <td>25691.160000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 31 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-be2be3af-430d-4b67-b8da-b09fbad47601')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-be2be3af-430d-4b67-b8da-b09fbad47601 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-be2be3af-430d-4b67-b8da-b09fbad47601');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "25OPlQGdX1aO"
      },
      "source": [
        "## Checking the frequency of frauds before moving forward"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:37.299683Z",
          "start_time": "2019-09-19T18:31:37.284064Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TlhTBDjAX1aO",
        "outputId": "7c63c51a-b4fb-4ddd-8f66-d6a4911dd004"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    284315\n",
              "1       492\n",
              "Name: Class, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "df.Class.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:37.612109Z",
          "start_time": "2019-09-19T18:31:37.299683Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "jkrxCrkLX1aO",
        "outputId": "b7f56662-4c25-4a97-ac10-1ba14f171bba"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Class', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.countplot(x=df.Class, hue=df.Class)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SvIz-7gFX1aO"
      },
      "source": [
        "By looking at the above statistics, we can see that the data is highly imbalanced. Only 492 out of 284807 are fraud."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wxG9778XX1aP"
      },
      "source": [
        "## Checking the distribution of amount"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.096369Z",
          "start_time": "2019-09-19T18:31:37.612109Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "Lw4buz5jX1aP",
        "outputId": "a140b934-d740-4b68-b755-b64fb14db7c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Amount', ylabel='Density'>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(10, 5))\n",
        "sns.distplot(df.Amount)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O4TM4x7CX1aQ"
      },
      "source": [
        "Since, it is a little difficult to see. Let's engineer a new feature of bins."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.111991Z",
          "start_time": "2019-09-19T18:31:38.096369Z"
        },
        "id": "u2aJbBnVX1aQ"
      },
      "outputs": [],
      "source": [
        "df['Amount-Bins'] = ''"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ABu38yMhX1aQ"
      },
      "source": [
        "Now, let's set the bins and their labels."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.127613Z",
          "start_time": "2019-09-19T18:31:38.111991Z"
        },
        "run_control": {
          "marked": false
        },
        "id": "WXcdAyAXX1aR"
      },
      "outputs": [],
      "source": [
        "def make_bins(predictor, size=50):\n",
        "    '''\n",
        "    Takes the predictor (a series or a dataframe of single predictor) and size of bins\n",
        "    Returns bins and bin labels\n",
        "    '''\n",
        "    bins = np.linspace(predictor.min(), predictor.max(), num=size)\n",
        "\n",
        "    bin_labels = []\n",
        "\n",
        "    # Index of the final element in bins list\n",
        "    bins_last_index = bins.shape[0] - 1\n",
        "\n",
        "    for id, val in enumerate(bins):\n",
        "        if id == bins_last_index:\n",
        "            continue\n",
        "        val_to_put = str(int(bins[id])) + ' to ' + str(int(bins[id + 1]))\n",
        "        bin_labels.append(val_to_put)\n",
        "    \n",
        "    return bins, bin_labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.158855Z",
          "start_time": "2019-09-19T18:31:38.127613Z"
        },
        "id": "vaP0dPoSX1aR"
      },
      "outputs": [],
      "source": [
        "bins, bin_labels = make_bins(df.Amount, size=10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jW-mt_ixX1aS"
      },
      "source": [
        "Now, adding bins in the column Amount-Bins."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.190100Z",
          "start_time": "2019-09-19T18:31:38.158855Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "huS8SohsX1aT",
        "outputId": "0dcdca47-97d0-4777-89da-c28cae95ab90"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Amount-Bins\n",
              "0   0 to 2854\n",
              "1   0 to 2854\n",
              "2   0 to 2854\n",
              "3   0 to 2854\n",
              "4   0 to 2854"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7fbf1763-b725-4400-8f0e-77dd435e628b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Amount-Bins</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0 to 2854</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0 to 2854</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0 to 2854</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0 to 2854</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0 to 2854</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fbf1763-b725-4400-8f0e-77dd435e628b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7fbf1763-b725-4400-8f0e-77dd435e628b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7fbf1763-b725-4400-8f0e-77dd435e628b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "df['Amount-Bins'] = pd.cut(df.Amount, bins=bins,\n",
        "                           labels=bin_labels, include_lowest=True)\n",
        "df['Amount-Bins'].head().to_frame()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gdBravwyX1aT"
      },
      "source": [
        "Let's plot the bins."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.205720Z",
          "start_time": "2019-09-19T18:31:38.190100Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NBdSUlG6X1aU",
        "outputId": "7ba22234-68ea-48ec-d272-e9f80245fd9c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0 to 2854         284484\n",
              "2854 to 5709         285\n",
              "5709 to 8563          28\n",
              "8563 to 11418          4\n",
              "11418 to 14272         3\n",
              "17127 to 19982         2\n",
              "22836 to 25691         1\n",
              "14272 to 17127         0\n",
              "19982 to 22836         0\n",
              "Name: Amount-Bins, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ],
      "source": [
        "df['Amount-Bins'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.484871Z",
          "start_time": "2019-09-19T18:31:38.205720Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 855
        },
        "id": "wVWe_T0vX1aU",
        "outputId": "351afc7e-aab2-4c0b-f54a-025ffccbcf71"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1, 2, 3, 4, 5, 6, 7, 8]),\n",
              " [Text(0, 0, '0 to 2854'),\n",
              "  Text(1, 0, '2854 to 5709'),\n",
              "  Text(2, 0, '5709 to 8563'),\n",
              "  Text(3, 0, '8563 to 11418'),\n",
              "  Text(4, 0, '11418 to 14272'),\n",
              "  Text(5, 0, '14272 to 17127'),\n",
              "  Text(6, 0, '17127 to 19982'),\n",
              "  Text(7, 0, '19982 to 22836'),\n",
              "  Text(8, 0, '22836 to 25691')])"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 10))\n",
        "sns.countplot(x='Amount-Bins', data=df)\n",
        "plt.xticks(rotation=45)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3TAjzFnPX1aU"
      },
      "source": [
        "Since, count of values of Bins other than '0 to 2854' are difficult to view. Let's not insert the first one."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.672541Z",
          "start_time": "2019-09-19T18:31:38.486867Z"
        },
        "scrolled": false,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 855
        },
        "id": "GuspKWkRX1aV",
        "outputId": "dd46ce69-70c5-44b5-d34a-d9abdbb1a1e7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1, 2, 3, 4, 5, 6, 7, 8]),\n",
              " [Text(0, 0, '0 to 2854'),\n",
              "  Text(1, 0, '2854 to 5709'),\n",
              "  Text(2, 0, '5709 to 8563'),\n",
              "  Text(3, 0, '8563 to 11418'),\n",
              "  Text(4, 0, '11418 to 14272'),\n",
              "  Text(5, 0, '14272 to 17127'),\n",
              "  Text(6, 0, '17127 to 19982'),\n",
              "  Text(7, 0, '19982 to 22836'),\n",
              "  Text(8, 0, '22836 to 25691')])"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15, 10))\n",
        "sns.countplot(x='Amount-Bins', data=df[~(df['Amount-Bins'] == '0 to 2854')])\n",
        "plt.xticks(rotation=45)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Kv7k4rGYX1aV"
      },
      "source": [
        "We can see that mostly the amount is between 0 and 2854 euros. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fiqYIfTJX1aV"
      },
      "source": [
        "# Predictive Modelling"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ju-pKT7GX1aV"
      },
      "source": [
        "Let's predict whether a credit card is fraud or not using machine learning."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Sfqt6Q9X1aV"
      },
      "source": [
        "## One-hot encoding the Amount-Bins"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0QAG6SFdX1aW"
      },
      "source": [
        "Since, for classification, we need to pass the data in numerical form. That's why we need to One-Hot encode the Amount-Bins column.<br>\n",
        "```Note: We can also label encode values.```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.813698Z",
          "start_time": "2019-09-19T18:31:38.674535Z"
        },
        "id": "YbJLQqUSX1aW"
      },
      "outputs": [],
      "source": [
        "df_encoded = pd.get_dummies(data=df, columns=['Amount-Bins'])\n",
        "df = df_encoded.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.839162Z",
          "start_time": "2019-09-19T18:31:38.813698Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "gultfpGZX1aW",
        "outputId": "44459615-6fd1-4a26-da8c-88bc75c3ff83"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
              "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
              "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
              "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
              "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
              "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
              "\n",
              "         V8        V9  ...  Class  Amount-Bins_0 to 2854  \\\n",
              "0  0.098698  0.363787  ...      0                      1   \n",
              "1  0.085102 -0.255425  ...      0                      1   \n",
              "2  0.247676 -1.514654  ...      0                      1   \n",
              "3  0.377436 -1.387024  ...      0                      1   \n",
              "4 -0.270533  0.817739  ...      0                      1   \n",
              "\n",
              "   Amount-Bins_2854 to 5709  Amount-Bins_5709 to 8563  \\\n",
              "0                         0                         0   \n",
              "1                         0                         0   \n",
              "2                         0                         0   \n",
              "3                         0                         0   \n",
              "4                         0                         0   \n",
              "\n",
              "   Amount-Bins_8563 to 11418  Amount-Bins_11418 to 14272  \\\n",
              "0                          0                           0   \n",
              "1                          0                           0   \n",
              "2                          0                           0   \n",
              "3                          0                           0   \n",
              "4                          0                           0   \n",
              "\n",
              "   Amount-Bins_14272 to 17127  Amount-Bins_17127 to 19982  \\\n",
              "0                           0                           0   \n",
              "1                           0                           0   \n",
              "2                           0                           0   \n",
              "3                           0                           0   \n",
              "4                           0                           0   \n",
              "\n",
              "   Amount-Bins_19982 to 22836  Amount-Bins_22836 to 25691  \n",
              "0                           0                           0  \n",
              "1                           0                           0  \n",
              "2                           0                           0  \n",
              "3                           0                           0  \n",
              "4                           0                           0  \n",
              "\n",
              "[5 rows x 40 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26390158-32b3-48c1-966d-e73037e06d65\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>Class</th>\n",
              "      <th>Amount-Bins_0 to 2854</th>\n",
              "      <th>Amount-Bins_2854 to 5709</th>\n",
              "      <th>Amount-Bins_5709 to 8563</th>\n",
              "      <th>Amount-Bins_8563 to 11418</th>\n",
              "      <th>Amount-Bins_11418 to 14272</th>\n",
              "      <th>Amount-Bins_14272 to 17127</th>\n",
              "      <th>Amount-Bins_17127 to 19982</th>\n",
              "      <th>Amount-Bins_19982 to 22836</th>\n",
              "      <th>Amount-Bins_22836 to 25691</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 40 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26390158-32b3-48c1-966d-e73037e06d65')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-26390158-32b3-48c1-966d-e73037e06d65 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-26390158-32b3-48c1-966d-e73037e06d65');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q14iEq-WX1aW"
      },
      "source": [
        "## Breaking the dataset into training and testing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HC77E2sJX1aW"
      },
      "source": [
        "First, separating the response variable from the explanatory variables."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:38.908684Z",
          "start_time": "2019-09-19T18:31:38.841155Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aitM6uhXX1aX",
        "outputId": "d3950402-d056-4aaa-aef1-bef375e75fa1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((284807, 39), (284807,))"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "X = df.drop(labels='Class', axis=1)\n",
        "Y = df['Class']\n",
        "\n",
        "X.shape, Y.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:41.110543Z",
          "start_time": "2019-09-19T18:31:38.915665Z"
        },
        "id": "tUfvsdvOX1aX"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:41.221404Z",
          "start_time": "2019-09-19T18:31:41.110543Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HHW9HF2eX1aX",
        "outputId": "9c3df8dc-cc21-45c7-b446-33d2149049ac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(199364, 39) (199364,)\n",
            "(85443, 39) (85443,)\n"
          ]
        }
      ],
      "source": [
        "xtrain, xtest, ytrain, ytest = train_test_split(\n",
        "    X, Y, random_state=42, test_size=0.3, shuffle=True)\n",
        "\n",
        "print(xtrain.shape, ytrain.shape)\n",
        "print(xtest.shape, ytest.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Fedrated learning"
      ],
      "metadata": {
        "id": "vWf4971GbSPV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class PeopleDataset(T.utils.data.Dataset):\n",
        "    def __init__(self, src_file, num_rows=None):\n",
        "        df = pd.read_csv(src_file)\n",
        "        df.drop(df.columns[[0]], axis=1, inplace=True)\n",
        "        print(df.columns)\n",
        "        df.Class = df.Class.astype('float64')\n",
        "        y_tmp = df['Class'].values\n",
        "        x_tmp = df.drop('Class', axis=1).values\n",
        "                \n",
        "\n",
        "        self.x_data = T.tensor(x_tmp,dtype=T.float64).to(device)\n",
        "        self.y_data = T.tensor(y_tmp,dtype=T.float64).to(device)\n",
        "\n",
        "        print(type(self.x_data))\n",
        "        print(len(self.x_data))\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.x_data)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        if T.is_tensor(idx):\n",
        "            idx = idx.tolist()\n",
        "        preds = self.x_data[idx].type(T.FloatTensor)\n",
        "        pol = self.y_data[idx].type(T.LongTensor)\n",
        "        sample = [preds, pol]\n",
        "        return sample\n"
      ],
      "metadata": {
        "id": "nmZfNOH7buWl"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MLPUpdated(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Linear(30, 32),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.2),\n",
        "            nn.Linear(32,16),\n",
        "            nn.ReLU(),\n",
        "            nn.Dropout(0.1),\n",
        "            nn.Linear(16, 8),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(8, 1),\n",
        "            nn.Sigmoid()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.layers(x)"
      ],
      "metadata": {
        "id": "hEi5k_Rdb4ZC"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "fed_acc, fed_pre, fed_recall, fed_f1 = list(), list(), list(), list()\n",
        "reg_acc, reg_pre, reg_recall, reg_f1 = list(), list(), list(), list()\n",
        "split_acc, split_pre, split_recall, split_f1 = list(), list(), list(), list()"
      ],
      "metadata": {
        "id": "fRGuiTV4b9w1"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "mp = {}\n",
        "     "
      ],
      "metadata": {
        "id": "qOXf5m-LcA70"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Can be changed to 12,16,24,32\n",
        "num_clients = 32\n",
        "# Change it to 3, 6, 10, 16\n",
        "num_selected = 16\n",
        "num_rounds = 2\n",
        "epochs = 5\n",
        "batch_size = 1024\n",
        "device = \"cpu\"\n",
        "device = torch.device(device)\n",
        "fed_acc, fed_pre, fed_recall, fed_f1 = list(), list(), list(), list()"
      ],
      "metadata": {
        "id": "K0TZ93-6cDWL"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Dividing the training data into num_clients, with each client having equal number of data\n",
        "traindata = PeopleDataset('/content/drive/MyDrive/sanjay/creditcard_train_SMOTE_1.csv')\n",
        "print(len(traindata))\n",
        "traindata_split = torch.utils.data.random_split(traindata, [int(len(traindata) / num_clients) for _ in range(num_clients)])\n",
        "train_loader = [torch.utils.data.DataLoader(x, batch_size=batch_size, shuffle=True) for x in traindata_split]\n",
        "\n",
        "\n",
        "test_file = '/content/drive/MyDrive/sanjay/creditcard_test.csv'\n",
        "test_ds = PeopleDataset(test_file)\n",
        "test_loader = T.utils.data.DataLoader(test_ds,batch_size=batch_size, shuffle=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lckwhPUicGFK",
        "outputId": "cb678d99-c0d7-4827-bf75-db1222270c19"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['scaled_amount', 'scaled_time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6',\n",
            "       'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16',\n",
            "       'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26',\n",
            "       'V27', 'V28', 'Class'],\n",
            "      dtype='object')\n",
            "<class 'torch.Tensor'>\n",
            "383808\n",
            "383808\n",
            "Index(['scaled_amount', 'scaled_time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6',\n",
            "       'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16',\n",
            "       'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26',\n",
            "       'V27', 'V28', 'Class'],\n",
            "      dtype='object')\n",
            "<class 'torch.Tensor'>\n",
            "28481\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def client_update(client_model, optimizer, train_loader, epoch=5):\n",
        "    \"\"\"\n",
        "    This function updates/trains client model on client data\n",
        "    \"\"\"\n",
        "    model.train()\n",
        "    for e in range(epoch):\n",
        "        for batch_idx, (data, target) in enumerate(train_loader):\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            optimizer.zero_grad()\n",
        "            output = client_model(data)\n",
        "            binary_loss = torch.nn.BCEWithLogitsLoss()\n",
        "            target = target.unsqueeze(1)\n",
        "            target = target.float()\n",
        "            loss = binary_loss(output, target)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "    return loss.item()"
      ],
      "metadata": {
        "id": "qb1IAq2ndpBV"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def server_aggregate(global_model, client_models):\n",
        "    \"\"\"\n",
        "    This function has aggregation method 'mean'\n",
        "    \"\"\"\n",
        "    ### This will take simple mean of the weights of models ###\n",
        "    global_dict = global_model.state_dict()\n",
        "    for k in global_dict.keys():\n",
        "        global_dict[k] = torch.stack([client_models[i].state_dict()[k].float() for i in range(len(client_models))], 0).mean(0)\n",
        "    global_model.load_state_dict(global_dict)\n",
        "    for model in client_models:\n",
        "        model.load_state_dict(global_model.state_dict())\n",
        "     "
      ],
      "metadata": {
        "id": "-6c-ClO5dpEW"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test(global_model, test_loader):\n",
        "    \"\"\"This function test the global model on test data and returns test loss and test accuracy \"\"\"\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "    actuals, predictions = list(), list()\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = global_model(data)\n",
        "            binary_loss = torch.nn.BCEWithLogitsLoss()\n",
        "            target = target.unsqueeze(1)\n",
        "            target = target.float()\n",
        "            test_loss += binary_loss(output, target)\n",
        "            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "            actual = target.numpy()\n",
        "            pr = output.detach().numpy()\n",
        "            pr = pr.round()\n",
        "            predictions.append(pr)\n",
        "            actuals.append(actual)\n",
        "\n",
        "    test_loss /= len(test_loader.dataset)\n",
        "    predictions, actuals = vstack(predictions), vstack(actuals)\n",
        "    # calculate accuracy\n",
        "    acc = accuracy_score(actuals, predictions)\n",
        "    # calculate precision\n",
        "    prescision = precision_score(actuals, predictions)\n",
        "    # calculate recall\n",
        "    recall = recall_score(actuals, predictions)\n",
        "    # calculate f1\n",
        "    f1 = f1_score(actuals, predictions)\n",
        "    fed_acc.append(acc)\n",
        "    fed_pre.append(prescision)\n",
        "    fed_recall.append(recall)\n",
        "    fed_f1.append(f1)\n",
        "    print()\n",
        "    print(confusion_matrix(actuals, predictions))\n",
        "    return test_loss, acc, prescision, recall, f1"
      ],
      "metadata": {
        "id": "J9fad1IbdsYA"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "global_model = MLPUpdated().to(device)\n",
        "\n",
        "############## client models ##############\n",
        "# client_models = [ MLPUpdated().cuda() for _ in range(num_selected)]\n",
        "client_models = [ MLPUpdated().to(device) for _ in range(num_selected)]\n",
        "for model in client_models:\n",
        "    model.load_state_dict(global_model.state_dict()) ### initial synchronizing with global model \n",
        "\n",
        "############### optimizers ################\n",
        "opt = [optim.SGD(model.parameters(), lr=0.01) for model in client_models]"
      ],
      "metadata": {
        "id": "UxnfmGKLdsax"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "losses_train = []\n",
        "losses_test = []\n",
        "acc_train = []\n",
        "acc_test = []\n",
        "# Runnining FL\n",
        "\n",
        "import time\n",
        "start_time = time.time()\n",
        "for r in range(num_rounds):\n",
        "    # select random clients\n",
        "    client_idx = np.random.permutation(num_clients)[:num_selected]\n",
        "    # client update\n",
        "    loss = 0\n",
        "    for i in tqdm(range(num_selected)):\n",
        "        loss += client_update(client_models[i], opt[i], train_loader[client_idx[i]], epoch=epochs)\n",
        "    \n",
        "    losses_train.append(loss)\n",
        "    # server aggregate\n",
        "    server_aggregate(global_model, client_models)\n",
        "    \n",
        "    test_loss, acc, prescision, recall, f1= test(global_model, test_loader)\n",
        "    losses_test.append(test_loss)\n",
        "    acc_test.append(acc)\n",
        "    print('%d-th round' % r)\n",
        "    print('average train loss %0.3g | test loss %0.3g | test acc: %0.3f | test prescision: %0.3f | test recall: %0.3f | test f1: %0.3f' % (loss / num_selected, test_loss, acc, prescision, recall, f1))\n",
        "\n",
        "print(\"--- %s seconds ---\" % (time.time() - start_time))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KdKDmdsVdz5G",
        "outputId": "52dba829-657f-464f-ff6b-ad1148bf37c6"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 16/16 [00:23<00:00,  1.45s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "[[ 2455 25972]\n",
            " [    2    52]]\n",
            "0-th round\n",
            "average train loss 0.717 | test loss 0.000963 | test acc: 0.088 | test prescision: 0.002 | test recall: 0.963 | test f1: 0.004\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 16/16 [00:22<00:00,  1.43s/it]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "[[10755 17672]\n",
            " [    3    51]]\n",
            "1-th round\n",
            "average train loss 0.719 | test loss 0.00096 | test acc: 0.379 | test prescision: 0.003 | test recall: 0.944 | test f1: 0.006\n",
            "--- 47.734737396240234 seconds ---\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mp[num_selected] = {'fed_acc': fed_acc, 'fed_pre': fed_pre, 'fed_recall': fed_recall, 'fed_f1': fed_f1}\n",
        "print(mp)\n",
        "print(len(mp))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-bpmXdWWd8zT",
        "outputId": "dfbab970-58f0-4602-bc2c-854fb44d5c8a"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{16: {'fed_acc': [0.08802359467715319, 0.37941083529370456], 'fed_pre': [0.0019981555487242546, 0.002877616656322293], 'fed_recall': [0.9629629629629629, 0.9444444444444444], 'fed_f1': [0.003988035892323031, 0.0057377510266074135]}}\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PKbf5kspX1aX"
      },
      "source": [
        "## FEDRATED LEARNING WITH MACHINE LEARNING"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fKGlM832X1aY"
      },
      "source": [
        "### FL + Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:41.514920Z",
          "start_time": "2019-09-19T18:31:41.223399Z"
        },
        "id": "SJzGyxHWX1aY"
      },
      "outputs": [],
      "source": [
        "def test(global_model, test_loader):\n",
        "    \"\"\"This function test the global model on test data and returns test loss and test accuracy \"\"\"\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "    actuals, predictions = list(), list()\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = global_model(data)\n",
        "            binary_loss = torch.nn.BCEWithLogitsLoss()\n",
        "            target = target.unsqueeze(1)\n",
        "            target = target.float()\n",
        "            test_loss += binary_loss(output, target)\n",
        "            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "            actual = target.numpy()\n",
        "            pr = output.detach().numpy()\n",
        "            pr = pr.round()\n",
        "            predictions.append(pr)\n",
        "            actuals.append(actual)\n",
        "\n",
        "    test_loss /= len(test_loader.dataset)\n",
        "    predictions, actuals = vstack(predictions), vstack(actuals)\n",
        "    # calculate accuracy\n",
        "    acc = accuracy_score(actuals, predictions)\n",
        "    # calculate precision\n",
        "    prescision = precision_score(actuals, predictions)\n",
        "    # calculate recall\n",
        "    recall = recall_score(actuals, predictions)\n",
        "    # calculate f1\n",
        "    f1 = f1_score(actuals, predictions)\n",
        "    fed_acc.append(acc)\n",
        "    fed_pre.append(prescision)\n",
        "    fed_recall.append(recall)\n",
        "    fed_f1.append(f1)\n",
        "    print()\n",
        "    print(confusion_matrix(actuals, predictions))\n",
        "    return test_loss, acc, prescision, recall, f1\n",
        "\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "lr_model = LogisticRegression()\n",
        "lr_model.fit(xtrain, ytrain)\n",
        "lr_pred_train = lr_model.predict(xtrain)\n",
        "lr_pred_test = lr_model.predict(xtest)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.393150Z",
          "start_time": "2019-09-19T18:31:47.387167Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "ugdz3dg0X1aZ",
        "outputId": "3b791bd6-dd9c-4995-92a8-7250033f59fd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Predicted Fraud  Predicted Not Fraud\n",
              "Fraud                   86                   50\n",
              "Not Fraud               35                85272"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e8514776-c8de-4d5e-b5ec-94edbfa5ed33\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Predicted Fraud</th>\n",
              "      <th>Predicted Not Fraud</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Fraud</th>\n",
              "      <td>86</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Not Fraud</th>\n",
              "      <td>35</td>\n",
              "      <td>85272</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e8514776-c8de-4d5e-b5ec-94edbfa5ed33')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e8514776-c8de-4d5e-b5ec-94edbfa5ed33 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e8514776-c8de-4d5e-b5ec-94edbfa5ed33');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix\n",
        "tn, fp, fn, tp = confusion_matrix(ytest, lr_pred_test).ravel()\n",
        "conf_matrix = pd.DataFrame(\n",
        "    {\n",
        "        'Predicted Fraud': [tp, fp],\n",
        "        'Predicted Not Fraud': [fn, tn]\n",
        "    }, index=['Fraud', 'Not Fraud'])\n",
        "conf_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.469889Z",
          "start_time": "2019-09-19T18:31:47.395144Z"
        },
        "id": "kEDkVatfX1aZ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.643450Z",
          "start_time": "2019-09-19T18:31:47.631483Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fDkuDkyWX1aa",
        "outputId": "46480a6d-5e6c-42ca-b271-3f45f8358eaa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9990051847430451"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "lr_accuracy = accuracy_score(ytest, lr_pred_test)\n",
        "lr_accuracy"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IY2OvIa9X1ab"
      },
      "source": [
        "We can see here that accuracy is great. Around 99%.<br>\n",
        "```BUT WAIT```<br>\n",
        "We know that the dataset is highly unbalanced and accuracy takes into account the whole confusion matrix. So we can say that this measure is not suitable."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4A180eaX1ab"
      },
      "source": [
        "Let's look at precision and recall."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.670737Z",
          "start_time": "2019-09-19T18:31:47.645446Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iBWzCwH-X1ab",
        "outputId": "08282e1f-1eef-4ffc-d44f-fa948cc10a4c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7107438016528925"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ],
      "source": [
        "lr_precision = precision_score(ytest, lr_pred_test)\n",
        "lr_precision"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJ8lhWcIX1ab"
      },
      "source": [
        "Recall:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.693702Z",
          "start_time": "2019-09-19T18:31:47.672183Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VoDrLHpzX1ab",
        "outputId": "2fc6f839-d943-4025-9837-04cb750099ed"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6323529411764706"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "lr_recall = recall_score(ytest, lr_pred_test)\n",
        "lr_recall"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L6SiT79aX1ac"
      },
      "source": [
        "Recall is very low in case of logistic regression. However, we may try to increase it by increasing the complexity of the model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.739917Z",
          "start_time": "2019-09-19T18:31:47.694697Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l2bvvW4jX1ac",
        "outputId": "e7e17b01-3fe8-4712-eff5-5142901403d4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6713483146067416"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ],
      "source": [
        "lr_recall_train = recall_score(ytrain, lr_pred_train)\n",
        "lr_recall_train"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0tj9ukOZX1ad"
      },
      "source": [
        "Well, we can see that the delta is small, only around 0.03. So, we can say that the model is not overfitting."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wd8jnOuYX1af"
      },
      "source": [
        "Let's look at the F1-Score. F1-Score may tell us that one of the precision or recall is very low."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.748903Z",
          "start_time": "2019-09-19T18:31:47.741918Z"
        },
        "id": "aSDN8j99X1ag"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import f1_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.783545Z",
          "start_time": "2019-09-19T18:31:47.750888Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7RLUi4b6X1ag",
        "outputId": "f1ce9603-084c-4f94-dade-9591a3298aaa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6692607003891051"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "lr_f1 = f1_score(ytest, lr_pred_test)\n",
        "lr_f1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5oRuWvTvX1ah"
      },
      "source": [
        "Let's look at the classification report."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.788531Z",
          "start_time": "2019-09-19T18:31:47.784542Z"
        },
        "id": "hOnPRHdAX1ah"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import classification_report"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.863424Z",
          "start_time": "2019-09-19T18:31:47.790526Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4EF_eaEoX1ah",
        "outputId": "cdb097ec-52f3-4577-8230-e41193e2ef48"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00     85307\n",
            "           1       0.71      0.63      0.67       136\n",
            "\n",
            "    accuracy                           1.00     85443\n",
            "   macro avg       0.86      0.82      0.83     85443\n",
            "weighted avg       1.00      1.00      1.00     85443\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(ytest, lr_pred_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WOpeRMaeX1ai"
      },
      "source": [
        "Let's look at the ROC curve."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jAQxlYrQX1ai"
      },
      "source": [
        "Now, for the ROC Curve, we need the probabilites of Fraud happening (which is the probability of occurance of 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.898520Z",
          "start_time": "2019-09-19T18:31:47.864421Z"
        },
        "id": "O5g_Zw25X1ai"
      },
      "outputs": [],
      "source": [
        "lr_pred_test_prob = lr_model.predict_proba(xtest)[:, 1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S2pdyNPOX1aj"
      },
      "source": [
        "Now, to draw the ROC Curve, we need to have ```True Positive Rate``` and ```False Positive Rate```."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.914142Z",
          "start_time": "2019-09-19T18:31:47.898520Z"
        },
        "id": "NzFCT4SPX1aj"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import roc_curve, roc_auc_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.945384Z",
          "start_time": "2019-09-19T18:31:47.914142Z"
        },
        "id": "YfisgRaYX1aj"
      },
      "outputs": [],
      "source": [
        "fpr, tpr, threshold = roc_curve(ytest, lr_pred_test_prob)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wynGZyrPX1aj"
      },
      "source": [
        "Also, let's get the auc score."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.981106Z",
          "start_time": "2019-09-19T18:31:47.945384Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cF7jgk58X1aj",
        "outputId": "afa0430d-1f27-49ce-dbdf-e0c40d676c7c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9343181960793507"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ],
      "source": [
        "lr_auc = roc_auc_score(ytest, lr_pred_test_prob)\n",
        "lr_auc"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "plX_DBQkX1ak"
      },
      "source": [
        "Now, let's define a function to plot the roc curve."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:47.988087Z",
          "start_time": "2019-09-19T18:31:47.983100Z"
        },
        "id": "oxMYLeeqX1ak"
      },
      "outputs": [],
      "source": [
        "def plot_roc_curve(fpr, tpr, label=None):\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    plt.title('ROC Curve', fontsize=15)\n",
        "    plt.plot([0, 1], [0, 1], 'k--')\n",
        "    plt.plot(fpr, tpr, linewidth=2, label=label)\n",
        "    plt.xticks(np.arange(0, 1, 0.05), rotation=90)\n",
        "    plt.xlabel('False Positive Rates', fontsize=15)\n",
        "    plt.ylabel('True Positive Rates', fontsize=15)\n",
        "    plt.legend(loc='best')\n",
        "    \n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QWvKBxMHX1ak"
      },
      "source": [
        "Plotting ROC Curve."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:48.310330Z",
          "start_time": "2019-09-19T18:31:47.992077Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "NIDFQ45GX1ak",
        "outputId": "746622c1-f32f-4835-aa1d-b182f71b9787"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfoAAAGbCAYAAAAsvVK2AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAABdcElEQVR4nO3dd1QT6fs28IuqIE0QEOwNRMHeFRsqWLCsIoq9YBcVLODXgl3svaGL2BV7AXXt667rusVVV1HXtawIiAgCFkoy7x++5icCGiDJJOH6nOM5MJncuSZR7zxTntERBEEAERERaSVdsQMQERGR8rDRExERaTE2eiIiIi3GRk9ERKTF2OiJiIi0GBs9ERGRFtMXOwARyW/t2rVYt26d7PdSpUrB2dkZkyZNQvXq1XOs//DhQ6xfvx7Xr19HWloa7O3t0alTJ/j6+sLY2DjH+vfu3cPmzZtx48YNvHnzBhYWFmjcuDEGDRqEWrVqfTXbq1evsHnzZly8eBFxcXEwMjKCi4sLevfuDQ8Pj8JvPBEViA6voyfSHGvXrkV4eDi2bt0KAIiJicGaNWuQmpqKyMhIWFhYyNb95ZdfMHLkSDg5OWHgwIEoVaoU7ty5g82bN6Ns2bLYsWMHSpQoIVv/7Nmz8Pf3R4MGDdCrVy/Y2toiPj4eJ06cwB9//IEbN27kmevff//FwIEDYWxsjMGDB6Nq1apIS0vD5cuXcejQIRw8eDDXLyJEpHxs9EQaZO3atdi1axeuX78uW3bz5k14e3tj2bJl8PT0BAC8f/8e7du3R/ny5REeHg4DAwPZ+tHR0ejZsyd8fHzwv//9DwAQHx8PDw8PdOjQAYsXL4aOjk6217148SLatGmTZ67vvvsOGRkZ2LdvH0xMTLI9Fh0dDTMzM9jb2xd4uz98+IDixYsX+PlERRmP0RNpuE8j5djYWNmy06dPIyEhAZMmTcrW5D+t37VrVxw8eBDv378HAERERCAzMxPTpk3L0eQBfLXJ37hxA3///Tf8/f1zNPlPr/epyQ8YMAB+fn7ZHr9+/TocHR3x4MEDAMDz58/h6OiI48ePY+rUqWjQoAFGjRqFwMBA9OzZM0f93bt3o3bt2khLSwMASKVSbNmyBe3bt4ezszPc3d1x5MiRPPMTaTs2eiIN9+LFCwBA2bJlZctu3LgBc3NzNGzYMNfnuLm54d27d/j7779l6zs7O8PS0jLfr//rr79CT08PzZo1K0D6vC1ZsgQlSpTA6tWrMXLkSHTs2BF37tzBf//9l229yMhItGrVSvYlY968edi4cSN69+6NLVu2oF27dpg+fTouXryo0HxEmoIn4xFpoKysLAAfm/y8efPg5OSEdu3ayR6Pj4//6q7yMmXKAABevnwpW79GjRoFyhIfHw9LS0uF71qvXbs2Zs+eLfs9KysLFhYWiIqKwogRI2Sv/fvvv2PVqlUAgKdPn2Lv3r1YtGgRevToAQBo1qwZEhISsG7duq/umSDSVmz0RBomOTkZNWvWlP1uYWGBgwcPwtDQsFB1c9tlL6bWrVtn+11fXx8dOnRAZGSkrNFHRUXByMhItu61a9egq6uL9u3by74MAUDTpk1x6tQpSCQS6OnpqWoTiNQCGz2RhjE1NUVYWBikUimio6MREhKCyZMnY+/evdDV/Xg0ztbWFrdv386zRkxMDADAxsZGtv6nQwD5ZWtri6SkJKSnp6NYsWIFqpEbKyurHMs6deqEAwcO4PHjx6hUqRKioqLQtm1b2d6EpKQkSCQS1K9fP9eaCQkJKF26tMIyEmkCNnoiDaOnpwcXFxcAH3dvFytWDNOmTcPp06fRqVMnAEDDhg1x6NAh/Pbbb2jQoEGOGhcuXICxsTGcnZ0BAI0aNcKmTZuQnJyc7RI9eTRu3Bhr1qzBtWvXcozCv2RoaIiMjIxsy1JSUnJdN7c9DI0aNUKpUqUQGRmJ7t274+bNm7LRPQCYm5tDX18fe/fuzfX5BTkHgUjT8WQ8Ig3XrVs3VKtWDaGhobJlHh4esLa2xqpVq7LtwgaABw8e4Pjx4/Dy8pKNhHv16gV9fX2EhITk+hqXLl3K8/UbNGiAmjVrYsWKFbIz3z93//592RUBpUuXxuPHj7M9fvXqVbm2E/j4JcfDwwNRUVGIioqCmZkZXF1dZY83adIEEokEqampcHFxyfGnsIc3iDQRR/REGk5HRwcjR47E5MmTce3aNTRt2hRGRkZYtmwZRo4ciQEDBmDAgAEoVaoU/v77b2zatAmOjo6YMGGCrIatrS0WL16MgIAAxMfHo2fPnrIJc06dOoXffvsNv/76a54Zli1bhoEDB6Jnz57ZJsy5evUqDhw4gIiICNjZ2aF9+/Y4ePAgFi5ciNatW+P69ev48ccf87W9HTt2xK5du7B9+3a0a9cuW/OuXLky+vTpA39/fwwbNgwuLi5IT0/Hw4cP8eTJEyxYsCD/bzCRhuOEOUQaJLcJcwBAIpGgU6dOKFu2LLZt2yZb/uDBg2xT4JYpU+arU+DevXs32xS4JUuWRJMmTTBkyJBsJwDmJiEhQTYFbnx8PIyMjFCrVi14e3ujQ4cOsvU2b96MPXv2ICUlBW5ubujYsSPGjBmDEydOwMHBAc+fP4ebmxs2bdqU61nygiCgTZs2iI2NxdatW7ON6D89Hh4ejoiICDx9+hQmJiaoWrUqevXqhe7du8vzNhNpFTZ6IiIiLcZj9ERERFqMjZ6IiEiLsdETERFpMTZ6IiIiLcZGT0REpMXY6ImIiLSY1k6Yk5T0FlKpYq4ctLIyQWJizhm/1KmmutdTRs2iVk8ZNdW9njJqFrV6yqip7vWUUVMZGRVFV1cHJUuWyPNxrW30UqmgsEb/qZ6iKbqmutdTRs2iVk8ZNdW9njJqFrV6yqip7vWUUVMZGVWBu+6JiIi0GBs9ERGRFtPaXfe5kUiykJSUgKysjG+v/JmXL3UhlUoVmkXRNdW9XkFr6usbomRJa+jpFam/qkREClOk/vdMSkpA8eLGKFGidK73qs6Lvr4usrIU2/QUXVPd6xWkpiAIePs2BUlJCShVyk6hWYiIiooites+KysDJUqY5avJk3h0dHRQooRZvvfAEBHR/ylSjR4Am7yG4edFRFQ4Ra7RExERFSVF6hi9OkpJSUH37h3RtWsPTJw4WbZ827bNeP/+PcaNmyhbdujQfkRH38P//hcMAHj27Ck2blyLf/55CHNzMxgYGKBv34Fo2bK1QrJt374VkZEnAACdOnli8ODhua536tRxHDiwBxKJFPb2ZTBjRjDMzMwhlUoxevQwfPjwAQBgbV0KAQFBsLOzz/b8hQvnIDLyBM6evQJjY2OFZCcioo9UOqIPCQlB27Zt4ejoiAcPHuS6jkQiwZw5c9CuXTu0b98eERERqoyocj/8cBo1azrj3LkzyMzMlPt5r169wrhxI9CqVRtERBzD9u27MX/+Erx9q5iZm/7883dcvHgOO3fux86d+3Hx4jncvPlHjvWePHmM0NCNWLVqI3btOoAaNWpi8+b1AABdXV0sX74W4eF7ER6+F02bNsfatSuzPf/q1SvcPU9EpEQqbfRubm7YvXs3ypQpk+c6J06cwLNnz3D27Fns378fa9euxfPnz1WYUrVOnTqOQYOGoUqVavjxx8tyP+/w4QOoW7c+PDw6y5ZZWZVCx45dFJLr3LmzcHfvjGLFiqNYseJwd++M8+d/yLHev/8+QrVqDihZsiQAoGnTFjh79rTscRMTE9nPb9++ha7u/zX1N2+SERYWivHj/RWSmYiIclLprvsGDRp8c53IyEh4eXlBV1cXlpaWaNeuHU6fPo3hw3PfbVxQqyL+wq1HiQqt+UmtKlaY6FX7m+v9889DpKS8Qf36DfH6dSJOnTqOtm3byfUaDx5Eo1GjJnKtm5qaivHjR+b6WKVKlTF79vwcy+Pi4lC7dn3Z77a2pfHXXzlH9FWrVsO9e3fx4kUM7Ozs8cMPp/H+/TukpLyBmZk5AGDyZD88eHAfFhYWWLFiney5K1aEYNiwkdm+DBARaTtBEFS6J1PtjtHHxsbC3v7/juHa2dkhLi5OxETKc/LkMXh4dIaOjg5atWqDlSuXIiHhJaytbfL8S1CQvxympqbYvn1PYePmqnz5Cpg4cTJmzw4CoANX11YAAD09Pdk6y5atgVQqxe7d27F9+zZMnhyI8+d/gL6+AZo1a6GUXEREiqCsQWFVOyNMH9RU4XVzo3aNXlGsrHKOEl++1IW+/sejFZP71lV1pGwyMzNx7txpGBgY4vTpUwA+ztx3+vRJDBkyHJaWloiPj5XlBYCUlDewtLSEvr4uqld3QnT03WyPf/7z51JTUzFmjG+uj1WqVAVz5y7Isbx06dJISIiT1Xz1Kh6lS5fO9TU8PDrCw6MjAODvv+/gyJGDMDc3+2ItXXTt2h1eXt0RGDgdf/31B/744zf06uUpW2PgwN5YuXIdKlWqnP2ZurqwtjbNNX9eywtK3espo6a611NGzaJWTxk11b2eomoqa8+vIEiUss25UbtGb2dnhxcvXqBWrVoAco7w5ZWYmJbjTkNSqbRAs70pY5a4K1cuoVy5Cti4cZts2Z07tzB//mwMGDAUderUR1jYVrx4EQsbG1ukpLzBuXNnMWnSVGRlSdG9ey8MGdIPkZGR6NDBA/r6ukhIeIVffvk5x3F6I6MSCAvLe0Sf27a1bdseK1YsQffuvQAAkZEnMXHilFzXTUx8BSurUkhPT8eWLZvQt29/ZGVJkZSUBB0dHVhYWAAAzp8/h8qVqyIrSwp//2nw958mq9GiRQPs2HEAxsbGOV5DKpUiISE1x+taW5vmuryg1L2eMmqqez1l1Cxq9ZRRU93rFbZmbqP4E8u7Fbheamoq/vrrT7Ro0RIAkJaWBhMTE4Vts66uTq6D20/UrtF7eHggIiICHTp0QHJyMs6dO4fdu3eLHUvhTpw4hg4dOmZb5uxcC1KpFH/++Tvq1q0PPz9/BAYGQCqVQhAE9OzpjQYNGgEASpWyxrp1W7Bx4xqEhm6EsbERihc3Qv/+gxSSr379BmjZsg369/cGAHh4dELduh+P2V+9ehlXr15BYOBMAMDChXMRHx+LzMxMuLl1QK9efQAAr18nYsGCYEgkWRAEAfb2ZTBz5lyF5CMiUpYvm3ytKlYFrnX79i0EBvojMfEVIiMvwNLSUuXnJekIgqCyG+zOnz8fZ8+exatXr1CyZElYWFjg1KlT8PX1hZ+fH1xcXCCRSDB37lz89NNPAABfX194e3vn+7VyG9HHxT1F6dIV8l1LHeZ91/R6hamZ1+em7qMKdRulaGI9ZdQsavU+r6nMk5C10feBbWU/5/dzkUqlCA//HuvXr4K1tQ0WLVqGOnXqKSOmeo3oZ8yYgRkzZuRYHhoaKvtZT08Pc+bMUWUsIqIigU1efoUZxUskEvj5jcZPP11Bu3YdMGvWPNlVSGJQu133RESkeKsi/pL9/PlItSA0aS+GGPT09FCnTl20adMWPXt6iz4pGBs9EVER8Gk0X5iRKuUtMzMD69evQbNmLdCoURP4+o4WO5JMkWv0qp6ogApHhaeQEKktRR5bl2cyL8qf58//Q2BgAO7cuQUDAwO5JzNTlSLV6PX1DfH2bQrvSa8hBEHA27cp0Nc3FDsKkagU1eQ5mle806dPYf782dDR0cXSpavQvr2H2JFyKFKNvmRJayQlJSAtLTlfz9PV1YVUqtgz0BVdU93rFbSmvr4hSpa0VmgOUgyewa16BT22Lubxam127dpPCAwMQO3adbFo0TLY2+d9HxcxFalGr6enj1Kl7PL9PE04UUTd6ymrJomHTV61OBpXH+/fv4eRkRGaNGmGuXMXoVMnT+jrq287Vd9kRKQRCnOtsTzU/UusutcjxREEAfv378bWrZuxY8c+2NuXQdeuPcSO9U1s9ERFCHe3ExXM69evMWnSBFy6dAGurq1QvLiR2JHkxkZPVIQouslzdzIVBb/99itmzJiKV68SMXlyEPr1G6hRJ3Sz0RNpGXlG7Z92t3M3MdG3HT9+BEZGRti5cx+cnGqKHSff2OiJtMy3mjxH4UTfFhcXiw8f3qNixcoIDJwBKysTvH+vmfN6sNETqSFFHEsv7DSnREXVxYvnERw8HRUqVER4+D4YG5eAiYkJ3r/XzL1fbPREaqiwTZ6jdqL8S09Px4oVIdi/fw+cnGpg3rwQjToWnxc2eiIVKOgI/ctROY+pEylHfHw8xo8fgQcP7qN//0Hw8wuAoaF2zMrJRk+kAgVp8hyVE6lOyZIlYW1tg/Hj/eHq2krsOArFRk+kRF+O5HncnEh9pKamYsOG1Rg9ejzMzMyxfn2o2JGUQlfsAETa7PMmzxE6kfq4ffsW+vTpgQMH9uK3334VO45ScURPpAIcyROpB6lUivDw77F+/SpYW9tg27adqFOnntixlIqNnigXnCqWSDtt2LAGW7duQrt2HTBr1jyYmZmLHUnp2OiJcqHIJs9d9kTiy8rKgr6+Pnr37osyZcqie/eeWnHpnDzY6KnIys9UsQXBS+GIxJeZmYF161YjOvouNmzYChsbW/To0UvsWCrFk/GoyOJUsUTa7b//nmHw4H4ID9+G8uUrQCKRiB1JFBzRU5GR1wieN3gh0j5HjhzBtGnToKurh2XLVqNdO3exI4mGjZ6KjNyaPEftRNrn/fv3WLx4MapVc8TChUthb19G7EiiYqMnraLs4+5EpL7++echKlSoACMjI0RERMDAwBT6+mxzPEZPWoXH3YmKHkEQsHfvTvTt+x1CQzcBAMqXL88m///xXSCNkZ9r2zlqJyoakpOTEBz8P1y6dAGurq3Qp09/sSOpHTZ60hjyNnmO2omKhlu3bmLy5AlISnqNKVOmw8dnQJG5Nj4/2OhJRlNmg+NZ8kQEAMbGJWBhURKrV2+Ak1NNseOoLR6jJxlNaPIcrRMVbXFxsQgL2woAqFq1GvbvP8Im/w0c0VMO3we2VcpomSNwIiqMCxfOITj4f8jKykSHDh4oU6Ysd9XLgY1ey2nK7ngiorykp6dj+fIQHDiwBzVq1MSiRctRpkxZsWNpDDZ6LZffJs9d40SkTgRBwJgxw/H77zcwYMBg+Pn5w8DAUOxYGoWNXoMUZnTOy82ISJMIggAA0NHRwYABQzB48HC4urYSOZVmYqPXIAVt8hylE5EmSU1Nxfz5s+HiUhv9+w9C69YcqBQGG72ay20Un9vonCe6EZE2uH37LwQGBiAuLhY1avBsekVgo1dzXzZ5js6JSBtJpVKEh2/D+vWrYW1tg++/34XateuKHUsrsNGrmW/dSpWISBtFR9/FmjUr0K6dO2bOnAszMzOxI2kNNno1w1upElFR8vz5f7C2roEaNZyxa9cB1KjhzGvjFYyNXk18OZLnCJ6ItFlmZgbWrl2F3bvDcfDgQVSq5ISaNV3EjqWV2OjVxOdNniN4ItJm//33DIGBAfj779vw8uoLFxcXpKVliR1La7HRqxmO5IlIm50+fQrz5s2Crq4eli9fAze3DjAyMkJaGq8aUhY2ejWwKuIvsSMQEalEQkICqlVzxMKFS2FvX0bsOEUCG70a+LTbnrvsiUgbRUffQ2LiKzRv7or+/Qehb9/+0Ndn+1EVvtMimbP1F/x2Lz7bsoletUVKQ0SkeIIgYO/enVi5cinKl6+Ipk2bQ1dXl01exfhui+TLJs/RPBFpk6SkJAQHT8flyxfRsmVrzJmzCLq6umLHKpLY6EXGk++ISNu8fp2IPn2+Q1LSa0yZMh0+PgN4bbyI2OiJiEihLC2t0LVrD7i5tYeTE+erFxsbvZIV5tayRESaIjb2BebMmYHJk4NQtWo1jBs3UexI9P/xgImSfa3J87g8EWmDCxd+gLd3D9y+/RdevHgudhz6gspH9I8fP0ZgYCCSk5NhYWGBkJAQVKxYMds6iYmJCAoKQmxsLLKystC4cWPMmDFD487U/Pz6+C+PxfO2skSk6T58+IAVK5bgwIE9qFHDGSEhK1CuXHmxY9EXVD6inz17Nnx8fHDmzBn4+Phg1qxZOdbZtGkTqlSpghMnTuD48eP4+++/cfbsWVVHLTReH09E2mzv3l04cGAPBg4civDwPWzyakqljT4xMRF3795Fly5dAABdunTB3bt38fr162zr6ejo4O3bt5BKpcjIyEBmZiZsbW1VGbXQPh/N8/p4ItIWgiDg1atXAIB+/QZi69Yd8PefCgMDQ5GTUV5U2uhjY2Nha2sLPT09AICenh5sbGwQGxubbb0xY8bg8ePHaNGihexP/fr1VRm10DiaJyJtk5qaimnT/NG5c2ekpqbC0NAQDRo0EjsWfYNaHvQ+ffo0HB0dER4ejrdv38LX1xenT5+Gh4eH3DWsrEwUmsna2rRAz1swpoXCa2pqPWXULGr1lFFT3espo2ZRq6eImr///jvGjh2LFy9eYOrUqahYsbRCJ8BRx21Wdj1VUWmjt7OzQ3x8PCQSCfT09CCRSPDy5UvY2dllW2/Xrl1YuHAhdHV1YWpqirZt2+L69ev5avSJiWmQSgWF5M7PiXNfXk6X1/MUfTKeutdTRs2iVk8ZNdW9njJqFrV6ha0plUqxfftWrF+/Gra2pREWthtubq5avc2qqKdIuro6Xx3cqnTXvZWVFZycnHDy5EkAwMmTJ+Hk5ARLS8ts65UtWxZXrlwBAGRkZODatWuoVq2aKqMWGO8rT0TaRBAEXLv2E9zcOmDfviOoVauO2JEon1S+6z44OBiBgYHYsGEDzMzMEBISAgDw9fWFn58fXFxcMH36dMyePRuenp6QSCRo3Lgxevfureqo3/S1yXA4tS0RabKffvoRDg6OsLa2wZo1G1G8uBGnsdVQKm/0VapUQURERI7loaGhsp/Lly+PsLAwVcYqkLyaPEfyRKSpMjMzsGbNCuzcuR1eXn3wv/8Fw8jIWOxYVAhqeTKepuHonYi0wbNnTxEYGIC7d+/Ay6svAgKmiR2JFICNnoiI8Ntvv8LPbxT09PSxfPkauLl1EDsSKQgbfQF9PiEOEZGmc3BwRMuWrTFhwmTY2dmLHYcUiDe1KSBOiENEmi46+i4CA/2RmZkBMzNzLF68gk1eC3FEn09fnmnP6W2JSNMIgoA9e3Zi1aqlsLAoiZiY56hYsbLYsUhJ2OjzidfJE5EmS0pKwuzZQbhy5RJatWqD4OCFKFmypNixSInY6AuIZ9oTkSaaPn0yfvvtV0yb9j/06dOf18YXAWz0RERaLisrC+/fv4eRkREmTw5CZmYmqld3EjsWqQhPxiMi0mKxsS/Qq1cvLFgQDACoUqUqm3wRw0afD7ykjog0yfnzZ9G7d3fcu3cPzZrlfSdN0m7cdZ8PvKSOiDTBhw8fsHx5CCIi9qJGDWeEhm5GiRL8f6uo4oi+AHhJHRGps9evE3HmTCQGDhyK8PA9qFixotiRSEQc0RMRaQFBEPDjj5fh6toK9vZlcOzYaV42RwA4opcbj88TkbpKSUnB1KmT4Oc3Cj/8cAYA2ORJplCNPiUlRVE51B6PzxOROvrrrz/h7d0dFy78AD8/f7Rrx5vRUHZyNfo9e/Zku1/8vXv30LJlSzRu3Bjfffcd4uLilBZQ3fD4PBGpi/3792Do0I+T3oSF7cbQoSOgq8sdtZSdXH8jdu3aBRMTE9nv8+fPh42NDZYtWwapVIply5YpLSAREeWuYsVKaN/eHfv2HUGtWnXEjkNqSq6T8WJjY1GpUiUAwOvXr/HHH39g+/btaNy4MQwMDDB37lylhhTbnK2/iB2BiAgAcPXqFTx69BCDBg1D48ZN0bhxU7EjkZqTa0RvaGiIzMxMAMAvv/yC4sWLo0GDBgAAc3NzpKamKi+hGvjtXjwAHp8nIvFkZmZg+fLFGDduBCIjTyIjI0PsSKQh5BrRu7i4YPfu3ShdujR27twJV1dX6OnpAQD+++8/2NjYKDWkuuDxeSISw7NnTxEY6I+7d/+Gt7cP/P2nwdDQUOxYpCHkavSBgYEYNWoUPD09YWdnh4ULF8oei4qKQr169ZQWkIioKHv7Ng0DB3pDKhWwYsU6tG3bTuxIpGHkavRVq1bFuXPnkJSUBAsLi2y3NZw6dSqsra2VFpCIqCjKzMyAgYEhSpQwwfTpwahVqzZKl7YTOxZpoHxdh2FhYYG4uDj88ccfePfuHQDA0dERlpaWSglHRFQURUffRa9eXXH+/FkAQIcOHmzyVGByN/rdu3fD1dUVbdq0Qb9+/fD48WMAwLhx47B9+3Zl5SMiKjIEQcDWrVsxYIA33r9/DwsLzm5HhSdXo9+6dSsWL16M3r17Izw8HIIgyB5r1KgRoqKilBaQiKgoSEpKwoQJozF79mw0a9YCBw4cRf36DcWORVpArmP0e/bsgZ+fH3x9fSGRSLI9VqlSJTx58kQZ2YiIioxffvkJ1679hHnz5qFLl17ZzoUiKgy5Gn1CQgKcnZ1zfUxXVxfp6ekKDUVEVBRkZWUhOvoenJ1d0LFjF9SqVQd16jghIUG75yYh1ZJr132FChXw66+/5vrYjRs3UKVKFYWGIiLSdi9exGDYsAEYPnwA4uM/TspVpkxZkVORNpKr0Q8aNAihoaHYsGGDbDd9YmIiIiIisH37dgwePFiJEYmItMv582fh7d0D//zzALNmzYOtra3YkUiLybXr3svLC2/evMH69euxdu1aAMCIESNgZGSEcePGwdPTU6khiYi0gSAIWLhwLiIi9qJGDWeEhKxAuXLlxY5FWk6uRg8Aw4cPR58+fXDz5k0kJSXB3NwcdevWhampqTLzERFpDR0dHRQrZohBg4Zh3LgJMDDgNLakfHI1+qNHj6JVq1YoWbIkWrRoke2x5ORkXLp0Cd27d1dGPiIijSYIAg4dOoBq1RxQu3ZdBAQE8ox6Uim5jtEHBQXhv//+y/Wx58+fIygoSKGhiIi0QUpKCqZMmYj582fjyJGDAMAmTyon14j+8wlyvpScnAwTExOFBSIi0gY3b/6BoKDJSEh4iQkTJmPQoKFiR6IiKs9Gf+7cOZw/f172+4YNG1CyZPbpGDMyMvDbb7/BxcVFeQmJiDTMzZt/YNiwAShd2g5hYbvh4sJbXJN48mz0r1+/xoMHD2S/P3v2DAkJCdnWMTAwQPPmzTF69GjlJSQi0hBSqRS6urpwcamN0aPHw9u7H09YJtHl2eh79+6N3r17AwAGDBiA4OBgToxDRJSHH3+8jFWrlmHTpm2wtrbB8OGjxI5EBEDOY/Q7d+5Udg4iIo2UkZGB5csXY+fO7XBwcMT79+/FjkSUjdzX0aelpeH8+fN48uRJrnPbT506VaHBiIjU3dOnTzBz5lTcunUL3t4+8PefhmLFiokdiygbuRr9s2fP0KdPH3z48AHv37+HpaUl3rx5g6ysLJibm8PExISNnoiKnNDQjXj27BlWrFiHtm3biR2HKFdyXUe/cOFCuLi44Oeff4YgCNiyZQv++usvLF26FMbGxli5cqWycxIRqYW3b9MQHx8HAJg6dTrOnj3LJk9qTa5Gf/v2bfTp0weGhh+na8zMzISenh48PT0xZMgQLFy4UKkhiYjUwb17f6Nv354ICPCDIAgwMzNHmTJlxI5F9FVyNfr09HSYmJhAV1cX5ubmePnypeyxatWqITo6WmkBiYjEJggCdu0Kx4ABHw9hTpw4mTPckcaQq9FXrFgRMTExAIAaNWpg3759SE9PR2ZmJg4ePAgbGxulhiQiEktKyhv4+Y3CsmWL0KKFKw4cOIoGDRqJHYtIbnKdjNe5c2fZqH3ChAkYNmwY6tevDx0dHUilUixatEipIYmIxGJgYIhXrxIQGDgD3t79OJInjSNXox8yZIjs5zp16uDkyZO4cuUK0tPT0aRJEzg4OCgtIBGRqmVlZWHPnh3o1csbxsYlsGtXBPT09MSORVQgcl9H/zk7Ozt4e3sD+HjsKjIyEp06dVJoMCIiMcTEPEdQ0GTcunUTZmbm6N69J5s8aTS5jtG/fv06xx3sPnz4gF27dqF9+/YICAhQSjgiIlX64YfT8PbugUePHmLRomXo3r2n2JGICi3PRv/+/XvMnDkTderUQfPmzdGwYUNs27YNALBv3z60bdsW8+fPR4UKFbR6itxVEX+JHYGIVGDnzu2YMmUiKlashP37j6Jjxy5iRyJSiDx33a9fvx5HjhxBz549Ub16dbx48QKbN2/GX3/9hbNnz6JJkybw9/dHrVq1VJlX5W49SgQA1KpiJXISIlIGQRCgo6ODtm3bISXlDUaMGA0DA0OxYxEpTJ6N/ocffsDYsWOz3YK2YcOGGDFiBHr27IkFCxaoJKC6mOjF+0kTaRNBEHDo0H78+ut1hISsQJkyZTF27ASxYxEpXJ677mNiYtCwYcNsyxo1+njtaI8ePQr8go8fP4a3tzfc3d3h7e2NJ0+e5LpeZGQkPD090aVLF3h6euLVq1cFfk0ios+lpLzBlCkTMX9+MFJS3uD9+3diRyJSmjxH9FlZWbIpbz8xMDAAABgZGRX4BWfPng0fHx9069YNx44dw6xZs7Bjx45s69y+fRvr1q1DeHg4rK2tkZqamiMLEVFB3LhxA6NHj0FCwktMmDAZgwYNha6uXOclE2mkr15et3PnTlhbW8t+/3Tm/Y4dO2Bl9X/HrHV0dDBlypRvvlhiYiLu3r2LsLAwAECXLl0wb948vH79GpaWlrL1tm/fjqFDh8pe29TUNB+bRESUu8zMDIwZMwa6uroIC9sNFxcekiPtl2ejt7e3x++//57r8hs3bmRbJm+jj42Nha2treyaVD09PdjY2CA2NjZbo3/06BHKli2Lfv364d27d2jfvj1Gjx6drxmprKxM5F5XHtbWiv+yoeia6l5PGTWLWj1l1FT3eoqomZCQgJIlS0Jf3xRhYWEoX748zMzMFJSuaLyHmlZPGTWVkVEV8mz0Fy5cUGWObCQSCe7fv4+wsDBkZGRg+PDhsLe3R/fu3eWukZiYBqlU+PaKckpISFVYLeDjXxhF1lT3esqoWdTqKaOmutdTRM0ff7yMWbMC4e3dD6NGjYOzszMSElIVlrMovIeaVk8ZNZWRUVF0dXW+OrhV6YEpOzs7xMfHQyKRAPjY0F++fAk7O7ts69nb28PDwwOGhoYwMTGBm5sbbt26pcqoRKThMjIysGzZIowfPxLW1jbo0KGj2JGIRKHSRm9lZQUnJyecPHkSAHDy5Ek4OTll220PfDx2f/XqVQiCgMzMTPzyyy+oXr26KqMSkQZ7+vQJBg3qg127wtGnTz/s3HkAlStXETsWkSgKNNd9YQQHByMwMBAbNmyAmZkZQkJCAAC+vr7w8/ODi4sLOnfujDt37qBTp07Q1dVFixYt0KtXL1VHJSINlZaWioSEBKxcuR5t2riJHYdIVCpv9FWqVEFERESO5aGhobKfdXV1ERQUhKCgIFVGIyIN9vZtGi5ePI8uXbqhZk0XnDp1DsWKFRM7FpHoVN7oiYgU7e7dO5g2LQAxMf/B2dkFFStWZpMn+v/yfYxeEATEx8cjKytLGXmIiOQmlUqxc2cYBg7si4yMdISGhqNixcpixyJSK3I3+suXL8PLywsuLi5o06YN7t+/DwCYOXMmjh07prSARER5CQqajOXLQ9CiRUvs338E9es3/PaTiIoYuRr90aNHMXr0aFSuXBnz5s2DVCqVPVahQgUcPHhQaQGJiPLSsmUbBAbOxMqV62BhUVLsOERqSa5Gv3HjRgwbNgwhISHo2rVrtseqVauGR48eKSUcEdHnMjMzsXbtShw58nFw0bmzJ/r06ZevWTOJihq5Gv2LFy/QrFmzXB8zNDREWlqaQkMREX0pJuY5hg0bgG3bNiM6+q7YcYg0hlyN3s7ODvfu3cv1sTt37qBChQoKDUVE9LkffjgNb+8e+Pfff7B48XIEBc0SOxKRxpCr0ffq1Qvr1q3DsWPH8OHDBwAfz76/du0atm7dCi8vL6WGJKKi6969e5gyZSIqVqyEffuOwMOjs9iRiDSKXNfR+/r6IjY2FoGBgbI7z/Xp0wdSqRTe3t4YOHCgUkMSUdGTkpICMzMzODk5YfXqDWjWzBUGBgZixyLSOHI1eh0dHcyePRuDBw/GL7/8gqSkJJibm6NJkyaoVKmSsjMSUREiCAIOHdqPlSuXYuPGbXBzc0WrVm3FjkWkseRq9O/evYOxsTEqVKjA4/FEpDQpKW8wd+5MnDt3Fk2bNkeZMmXFjkSk8eRq9M2aNUPr1q3RuXNntGrVCoaGhsrORURFzM2bfyAoaDISEl5i4sQpGDhwCHR1VXqDTSKtJFejnzJlCqKiouDn5wdjY2O0bdsWnTt3RosWLaCvz+nyiajwbty4Dj09PYSF7YGLSy2x4xBpDbm6dL9+/dCvXz/Ex8cjKioKp0+fxqhRo2Bubg43Nzd07twZzZs3V3ZWItIy8fHxiIt7gdq162Lo0BHo23cATExMxI5FpFXyNRy3tbXF4MGDMXjwYLx48QJRUVHYvn07jh49irt3OYEFEcnvypWLmDUrCCVKmODYsdPQ19dnkydSggLtd3/69CkiIyMRGRmJhIQE2NnZKToXEWmpjIwMrFq1DHv27ICDQ3WEhKzgIUAiJZL7X1dMTAwiIyMRFRWFe/fuwcrKCh4eHggODkb9+vWVmZGItERKyhuMGDEE0dF30bdvf0ycOIX3jSdSMrkafa9evfD333/D3NwcHTp0wNSpU9GoUSOeEUtE+WJqagYnp5oYNWocWrfmtfFEqiBXo69WrRr8/PzQvHlz2cx4RETyePs2DcuXh2DIEF+UK1ces2fPEzsSUZEiV6NftGiRsnMQkRa6e/cOpk0LQEzMf6hVqw7KlSsvdiSiIifPRn/58mXUr18fJiYmuHz58jcLtWrVSqHBiEhzSaVS7N4djtWrV8DKygqhoeGoX7+h2LGIiqQ8G/3IkSNx4MAB1KpVCyNHjvxqER0dnTxvY0tERc/+/buxfHkIWrd2Q3DwfFhYlBQ7ElGRlWejP3/+PKytrWU/ExF9y6fbWHfv3gsmJqbo0qUbdHR0RE5FVLTl2ejLlCkj+1lHRwfW1ta53iIyKysLL1++VE46ItIImZmZ2LRpHa5cuYDw8H0wNi4BT8/uYsciIgByXR/n5uaW56756OhouLm5KTQUEWmOmJjnGDZsALZt24wGDRpAR4eX3RKpE7nOuhcEIc/H0tPTeTc7oiLq7NnTmDt3JgABISEr0L+/NxISUsWORUSfybPRR0dHIzo6Wvb75cuX8e+//2ZbJz09HVFRUahYsaLSAhKRepJKpdi1KwyVKlXG4sXLee94IjWVZ6M/d+4c1q1bB+DjMfr169fnul7ZsmUxd+5c5aQjIrXzzz8PYGVljZIlS2LVqg0wNTXL9fwdIlIPX728bujQoRAEAfXr10d4eDhcXFyyrWNgYMB/4ERFhCAIOHhwP5YtWwR3906YO3cRLC2txI5FRN+QZ6P/vIl/vgufiIqeN2+SMXfuTJw//wOaNWuBCRMCxI5ERHLKs9H/888/KF++PAwNDfHPP/98s1DVqlUVGoyI1EN09D1MnDgGr14lwN9/Kvr3H8wbWhFpkDwbfZcuXWQz43Xp0iXPSS8EQeDMeERazMbGBnZ29li2bA2cnV2+/QQiUit5NvodO3agSpUqsp+JqOiIj4/H7t3b4ecXAEtLK4SF7RY7EhEVUJ6NvlGjRrn+TETa7cqVi5g1KwgfPqSjY8cucHKqKXYkIioEuSbMSUxMxLt371CuXDkAH3fXHzhwAP/88w+aNm2Ktm3bKjUkESlfRkYGVq1ahj17dsDBoTpCQlagUqXKYsciokKS64yawMBAhIeHy35fvXo15syZgx9//BHjxo3D4cOHlRaQiFRj+vQp2LNnB/r2HYCdO/ezyRNpCbka/d27d9GkSRMAH2fD2rdvHyZNmoTTp09j1KhR2b4EEJFmkUgkAIAhQ4Zj1aoNmDbtfyhWrJjIqYhIUeRq9KmpqbCwsAAA3LlzB2/evEHXrl0BAE2aNMGzZ8+UFpCIlOPt2zSMHz8eISELAAA1a7qgdWsehiPSNnI1+tKlS8uupb98+TIqV64MW1tbAB+/BPCmNkSa5e7dO+jTpyeOHj0KKyurr964iog0m1wn4/Xs2RNLly7Fzz//jMuXL8Pf31/22F9//SW7DI+I1JtUKsXu3eFYvXoFSpUqhYMHD6Jy5RpixyIiJZKr0Y8cORK2tra4ffs2ZsyYgV69eskeS05OhpeXl9ICEpHixMXFYsOGtXB1bYXg4PmoWrUcbytLpOXkavQA0L17d3Tv3j3Hct65jkj93b8fDQcHR9jbl8HevQdRoUKlPGe7JCLtInejz8rKwtmzZ/H7778jOTkZFhYWqF+/Pjp06AB9fbnLEJEKZWZmYuPGNQgL24qFC5eiY8cuqFiRl80RFSVyT5gzdOhQ3L9/H2XKlEGpUqVw8+ZN7N69G9WrV8f3338PS0tLZWclonyIiXmOoKAA3Lr1F777zgutW7uJHYmIRCBXo1+0aBGSk5NlN7n55NatW/Dz88OiRYuwdOlSpYUkovy5cOEHzJoVBAAICVkJd/eOIiciIrHIdXndlStXMHny5GxNHgBq1aoFf39/XL58WSnhiKhg9PT0ULlyFezff5RNnqiIk2tEn5GRgRIlSuT6WIkSJZCZmanQUESUfw8f3sfff99B9+490apVW7i6tuZ944lIvhF97dq1ERoainfv3mVb/u7dO4SGhqJ27dpKCUdE3/bxJlN70a+fFzZtWof3798DAJs8EQGQc0QfGBiIgQMHonXr1mjevDmsrKzw+vVrXL16FYIgYOfOncrOSUS5ePMmGXPmzMSFCz+geXNXzJu3GEZGRmLHIiI1Ilejd3JywpkzZ/D999/j9u3buH//PqytrdGnTx8MHjyYZ9wTieDDhw/w8emF+Ph4+PtPRf/+gzmKJ6Icvtnok5KSEBMTA2tra0yePLnQL/j48WMEBgbKrsUPCQlBxYoVc13333//RY8ePeDj44Np06YV+rWJtIEgCNDR0UHx4sUxePBwODnVhLOzi9ixiEhN5fn1Py0tDRMmTECzZs3g5eWF1q1bo3fv3oW+U93s2bPh4+ODM2fOwMfHB7Nmzcp1PYlEgtmzZ6Ndu3aFej0ibRIbG4uRI4fg559/BAB4efVhkyeir8qz0a9duxZXrlyBn58fNm/ejJkzZyI+Ph7Tp08v8IslJibi7t276NKlCwCgS5cuuHv3Ll6/fp1j3S1btqB169Z5jvaJiporVy6iffv2uHXrL6SkpIgdh4g0RJ677i9cuICJEydi0KBBsmUODg4YMGAAUlNTYWpqmu8Xi42Nha2tLfT09AB8vNbXxsYGsbGx2Y7zR0dH4+rVq9ixYwc2bNiQ79cBACsrkwI9Ly/W1vnfXlXXVPd6yqhZFOqlp6djwYIF2LZtG2rWrIkNGzagatWqCkj3kTpus7JrFrV6yqip7vWUUVMZGVUhz0b/4sULuLhk3yVYq1YtCIKAmJgYVK9eXSmBMjMzMXPmTCxatEj2haAgEhPTIJUq7h7bir7Dl7W1qUJrqns9ZdQsKvUiI09g27Zt8PEZiPnzg5GSkqGwnOq6zcqsWdTqKaOmutdTRk1lZFQUXV2drw5u82z0Eokkx81qPjVeqVRaoDB2dnaIj4+HRCKBnp4eJBIJXr58CTs7O9k6CQkJePbsGUaMGAEASElJgSAISEtLw7x58wr0ukSaRhAEvHgRgzJlyqJjxy4oV648XFxqo1ixYgAyxI5HRBrkq2fdr1ixAubm5rLfBeHjCHnp0qUwMzOTLdfR0cGqVau++WJWVlZwcnLCyZMn0a1bN5w8eRJOTk7Zdtvb29vj+vXrst/Xrl2Ld+/e8ax7KjLS0tKwYEEwrly5iIMHT8DOzh4uLpyUiogKJs9G37BhQ0gkkhwnyjVs2BBZWVm5nkAnj+DgYAQGBmLDhg0wMzNDSEgIAMDX1xd+fn45DhcQFSV37txGUFAAYmKeY/To8bCxsRU7EhFpuDwbvbJmu6tSpQoiIiJyLA8NDc11/fHjxyslB5E6+TjDZBjWrFkBa2sbbNu2C3Xr1hM7FhFpAU6jRaQGdHR08OTJY7Rq1Qb79x9hkycihZFrClwiUo5ffvkZFhYlUb26E4KCZkJf3wA6OjpixyIiLcIRPZEIMjMzsWbNcowePQybN68HABgYGLLJE5HCcURPpGIxMc8RGBiA27f/wnffeWHKlILPNklE9C1s9EQqFB19D8OHDwCggyVLVqFDBw+xIxGRlstXoxcEAXFxcYiNjUX16tVhbGysrFxEWqlKlaro1KkrBg0aijJlyoodh4iKALmP0e/evRuurq5o06YN+vXrh8ePHwMAxo0bh+3btysrH5HGe/jwPkaNGork5CQYGBhg+vRZbPJEpDJyNfqtW7di8eLF6N27N8LDw2Uz5AFAo0aNEBUVpbSARJpKEATs378H/fp54Z9/HiIm5rnYkYioCJJr1/2ePXvg5+cHX19fSCSSbI9VqlQJT548UUY2Io315k0ygoImISoqCs2bu2LevMWwtLQSOxYRFUFyNfqEhAQ4Ozvn+piuri7S09MVGopI061YsQTnzp2Dv/9U9O8/GLq6vJKViMQh1/8+FSpUwK+//prrYzdu3ECVKlUUGopIE0kkErx5kwwAmDAhAMeOHcPAgUPZ5IlIVHKN6AcNGoQ5c+bAwMAA7u7uAIDExERERERg+/btvH0sFXnx8XGYPn0KpFIptm7dAUtLK1hbV1Tb+1cTUdEhV6P38vLCmzdvsH79eqxduxYAMGLECBgZGWHcuHHw9PRUakgidXbp0gXMnh2EjIxMTJ8+C3p6emJHIiKSkfs6+uHDh6NPnz74888/kZycDHNzc9StWxempqbKzEekttLT07Fq1VLs3bsL1avXQEjIclSoUEnsWERE2eRrwhwTExO4uroqKwuRRsnMzMTVqz+iX79BmDAhAIaGhmJHIiLKQa5Gv3v37m+u069fv0KHIVJ3giDg3LkzaNmyDUxMTLB//2EYG5cQOxYRUZ7kavRfO9nu09222OhJ26WlpWHBgmBERZ3ElCnT0a/fQDZ5IlJ7cjX66OjoHMtSUlJw9epVhIaGYvny5QoPRqRO7ty5jcBAf8TGvsDYsRPRpw+/2BKRZijwBb5mZmbo1KkT+vTpg9mzZysyE5FaOXXqOAYP7guJRIKtW3fC13cUz6wnIo1R6Jk8ypYtizt37igiC5FaqlnTGR06dMT+/UdQt249seMQEeVLoRr9y5cv8f3336NsWd6Ji7TLtWs/ISRkPgRBQMWKlbFw4VKYmZmLHYuIKN/kOkbfpEkT2Ul3n2RmZuLt27coVqyYbBIdIk2XmZmJDRvWICwsFJUrV0VKyhuYm1uIHYuIqMDkavT9+/fPsczQ0BClS5eGq6srSpYsqfBgRKr27NkzjBgxCrdv/4WePXtj8uQgGBkZiR2LiKhQvtnoMzMz0bRpU5QtWxa2traqyESkcllZWejTpw8SE19jyZJV6NDBQ+xIREQK8c1Gr6enh0GDBiE0NJSNnrTO+/fvUaxYMejr62P58uUwMrJAmTI854SItMc3T8bT1dVFxYoV8erVK1XkIVKZBw/uw8enJ8LDtwEAmjZtyiZPRFpHrrPuJ06ciPXr1+P+/fvKzkOkdIIgYN++3ejf3wupqamoUcNZ7EhEREqT5677GzduoEaNGihRogQ2btyI5ORkdO/eHba2trCysspxFv7BgweVHpaosN68SUZw8AxcvHgOLVq0wty5i2BpaSl2LCIipcmz0Q8cOBD79+9HrVq14ODgAAcHB1XmIlKKf//9F9euXUVAQCD69RsIXd1CzxlFRKTW8mz0giDIfl60aJFKwhApg0QiwY0b19GkSTPUrVsPkZHnYWlpJXYsIiKV4HCGtFp8fBxGjBiEUaOG4sGDj+eYsMkTUVHy1cvrLl++jH///VeuQt27d1dEHiKFuXTpAmbPDkJGRibmzVsMBwdHsSMREancVxv9+vXr5Sqio6PDRk9qZcWKJdix43tUr14DISHLUaFCJbEjERGJ4quNfseOHXB25qVHpHnKlCmLfv0GYcKEABgaGoodh4hINF9t9MWLF4exsbGqshAVmCAIOHbsMIyNS6BDBw94e/uIHYmISC3wZDzSeGlpaQgKmozg4P8hMvKE2HGIiNSKXHevI1JXt2/fQlBQAGJjX2Ds2IkYOtRX7EhERGolz0YfHR2tyhxE+fbo0SMMGeIDa2sbbN26E3Xr1hM7EhGR2uGInjROZmYmDAwMUKVKFQQGzkSHDh4wMzMXOxYRkVriMXrSKD//fBVdu7ojOvoeAKBXL282eSKir2CjJ42QmZmBVauWYcyY4TA2LgEDAwOxIxERaQTuuie19/z5fwgMDMCdO7fQq5c3AgICYWRkJHYsIiKNwEZPau/48SN4+vQJli1bjXbt3MWOQ0SkUdjoSS29f/8OMTExqFq1Gnx9R+O777xQurSd2LGIiDQOj9GT2rl/Pxo+Pr0wfvxIZGRkwMDAgE2eiKiA2OhJbQiCgH37dmHAgN5IS0vFnDkLOU89EVEhcdc9qYX3798hKGgKLl06jxYtWmHu3EWwtLQUOxYRkcZjoye1UKxYcQACAgIC0b//IOjo6IgdiYhIK7DRk2gkEgm2b9+Kzp27onRpO6xcuZ4NnohIwdjoSRTx8XGYPn0yfv/9N+jq6mLIEF82eSIiJVB5o3/8+DECAwORnJwMCwsLhISEoGLFitnWWb9+PSIjI6GrqwsDAwNMmjQJrq6uqo5KSnLx4nkEB09HRkYm5s8PQZcu3cSORESktVR+1v3s2bPh4+ODM2fOwMfHB7NmzcqxTq1atXDw4EGcOHECCxcuxKRJk/DhwwdVRyUlOHnyGCZNGgt7+zLYt+8wmzwRkZKptNEnJibi7t276NKlCwCgS5cuuHv3Ll6/fp1tPVdXV9kUp46OjhAEAcnJyaqMSgomlUoBAK1bu2HMGD+Eh+9DhQoVxQ1FRFQEqLTRx8bGwtbWFnp6egAAPT092NjYIDY2Ns/nHD16FOXLl0fp0qVVFZMUSBAEHDlyEIMH++DDhw8wMTHBiBFjeH08EZGKqPXJeL/++itWr16N77//Pt/PtbIyUWgWa2tThdZTRk11q5eSkoJp06bh+PHjaN68Od69ewdra8VeG69u26zsesqoqe71lFGzqNVTRk11r6eMmsrIqAoqbfR2dnaIj4+HRCKBnp4eJBIJXr58CTu7nNOb/vnnn5gyZQo2bNiAypUr5/u1EhPTIJUKiogNAEhISFVYLeDjXxhF1lS3erdv/4XAwADExcVi3LiJGDLEF5aWFmqVUdPqKaOmutdTRs2iVk8ZNdW9njJqKiOjoujq6nx1cKvSXfdWVlZwcnLCyZMnAQAnT56Ek5NTjhnQbt26hUmTJmHNmjWoWbOmKiOSAgiCgMWL50MqlWLbtp0YPnyU7HANERGplsp33QcHByMwMBAbNmyAmZkZQkJCAAC+vr7w8/ODi4sL5syZgw8fPmQ7I3/JkiVwdHRUdVzKh1evElCsWHGYmppiyZKVMDU1g5mZmdixiIiKNJU3+ipVqiAiIiLH8tDQUNnPhw4dUmUkUoCff76KGTOmoXlzV8ybtxhlypQVOxIREYF3r6NCyszMwMqVSzFmzHCULGmJQYOGiR2JiIg+o9Zn3ZN6e/EiBlOnTsKdO7fg5dUHAQGBKF68uNixiIjoM2z0VGB6enp48yYZy5atRrt27mLHISKiXHDXPeXL+/fvsHPndkilUtjalsaRI5Fs8kREaowjepJbdPQ9BAb64+nTJ6hZ0xn16jWAvj7/ChERqTOO6OmbBEHAvn27MGBAb7x9m4bNm8NQr14DsWMREZEcOByjb1q4cC4iIvbC1bUV5sxZlGOCIyIiUl9s9PRNHTt2RoUKFdGv30Do6OiIHYeIiPKBjZ5yyMrKwrJly/DmzVv4+fmjXr0G3FVPRKSheIyesomLi8WIEYOxcuVKvHqVILuPPBERaSaO6EnmwoVzCA7+H7KyMrFmzRq0bNlB7EhERFRIHNETAODly3gEBvqjbNmy2Lv3MHr27Cl2JCIiUgCO6Iu4hISXsLa2gY2NLTZvDoOzswsMDAzFjkVERArCEX0RJQgCjhw5CE9Pd5w5EwUAqFu3Pps8EZGW4Yi+CEpNTcX8+bNx5kwkGjVqgrp164kdiYiIlISNvoi5ffsvBAYGIC4uFuPHT8LgwcOhp6cndiwiIlISNvoi5sWLGEilUnz//S7Url1X7DhERKRkbPRFwKtXCfj779to1aot3N07oWXLNjAyMhI7FhERqQAbvZb7+ecfMWNGILKyshAZeR4mJiZs8kRERQjPutdSmZkZWLFiCcaM8YWlpSW+/34XTExMxI5FREQqxhG9FsrMzMCQIf1x584teHn1QUBAIIoXLy52LCIiEgEbvRYyMDBEq1ZtMHjwMLRr5y52HCIiEhF33WuJt2/fIjj4f/j99xsAAF/f0WzyRETERq8NoqPvwcPDA8eOHca9e3fFjkNERGqEu+41mCAI2Lt3J1auXAorKyts2RKGhg2biB2LiIjUCBu9Bjt37gyWLFmIli1bY/36tZBIDMSOREREaoaNXgOlpqbC1NQUbm4dsGzZari5dYClpRkSElLFjkZERGqGx+g1SFZWFjZsWIOuXd0RFxcLXV1dtGvnDh0dHbGjERGRmuKIXkPExcUiKGgy/vzzd3h6doepqanYkYiISAOw0WuACxfOITj4f8jKysSCBUvRubOn2JGIiEhDsNFrgLNno1C2bFksXrwC5ctXEDsOERFpEDZ6NfXvv4+gp6eLChUqYdasuTAwMICBgaHYsYiISMPwZDw1IwgCjhw5CB+fXli0aB4AwNi4BJs8EREVCEf0aiQ1NRXz58/GmTORaNy4KebNWyx2JCIi0nBs9Gri2bOnGD16GOLiYjF+/CQMGeILXV3ucCEiosJho1cTtralUa2aIxYuXIrateuKHYeIiLQEh4wievUqAbNnT0dqaiqKFSuGVavWs8kTEZFCsdGL5OLFi/Dy6oYzZyJx797fYschIiItxUavYpmZGVixIgT9+/eHlZUVdu8+iEaNeMc5IiJSDh6jV7FlyxZj//49GDhwIMaM8Ufx4sXFjkRERFqMjV5FMjIyYGhoiKFDR6Bx46bw9v6Od5sjIiKlY6NXsnfv3mLRonl49SoB69eHwta2NGxtS4sdi4iIiggeo1ei6Oh76Nu3J06ePAYXl9oQBEHsSEREVMRwRK8EgiBg796dWLlyKSwsSmLLljA0bMgT7oiISPU4oleCtLQ0hId/j6ZNm+PAgWNs8kREJBqO6BXo9u2/UL16DZiammLHjn2wsbGFjo6O2LGIiKgI44heAbKysrBhwxoMHNgHu3aFA/g4pS2bPBERiY0j+kKKjX2B6dOn4M8/f0fXrj3g7d1X7EhEREQybPSF8PPPVxEYGACJJAsLFixF586eYkciIiLKho2+EKysSqFKlaqYO3cRypUrL3YcIiKiHHiMPp8ePfoHoaGbAACOjtXx/fe72OSJiEhtqbzRP378GN7e3nB3d4e3tzeePHmSYx2JRII5c+agXbt2aN++PSIiIlQdMwdBEHDo0AH069cLe/bsQGLiKwDgCXdERKTWVN7oZ8+eDR8fH5w5cwY+Pj6YNWtWjnVOnDiBZ8+e4ezZs9i/fz/Wrl2L58+fqzpqNlOnTsK8ebNQu3Y9HDhwFFZWpUTNQ0REJA+VNvrExETcvXsXXbp0AQB06dIFd+/exevXr7OtFxkZCS8vL+jq6sLS0hLt2rXD6dOnVRk1hwsXfoCfnz82btwKa2sbUbMQERHJS6Un48XGxsLW1hZ6enoAAD09PdjY2CA2NhaWlpbZ1rO3t5f9bmdnh7i4uHy9lpWViUIyN3CyRUJCAmYfPowGDRoopOYn1tamRaqeMmoWtXrKqKnu9ZRRs6jVU0ZNda+njJrKyKgKWnvWfWJiGqTSwt9EZky3mrC2NkVCQqpCbyv7qWZRqaeMmkWtnjJqqns9ZdQsavWUUVPd6ymjpjIyKoqurs5XB7cq3XVvZ2eH+Ph4SCQSAB9Punv58iXs7OxyrPfixQvZ77GxsShdmrd2JSIiyi+VNnorKys4OTnh5MmTAICTJ0/Cyckp2257APDw8EBERASkUilev36Nc+fOwd3dXZVRiYiItILKz7oPDg7Grl274O7ujl27dmHOnDkAAF9fX9y+fRsA0K1bN5QtWxYdOnRA7969MXbsWJQrV07VUYmIiDSeyo/RV6lSJdfr4kNDQ2U/6+npyb4AEBERUcFxZjwiIiItxkZPRESkxdjoiYiItBgbPRERkRZjoyciItJibPRERERajI2eiIhIi7HRExERaTGtvamNrq6OWtdTRk11r6eMmkWtnjJqqns9ZdQsavWUUVPd6ymjpjIyKsK3cukIglD4W7wRERGRWuKueyIiIi3GRk9ERKTF2OiJiIi0GBs9ERGRFmOjJyIi0mJs9ERERFqMjZ6IiEiLsdETERFpMTZ6IiIiLcZGT0REpMXY6ImIiLSY1t7UpjBevHiB06dPIzY2FgBgZ2cHd3d3lClTptC137x5g4cPH6JSpUqwsrLS2ozv37/HlStXsuVzdXWFsbFxofMBgCAIiIuLg62tLXR1C/Z9le9h4d9DZWZURD5A/T9ndc+nCRmVmU9RGcXEEf0XIiIi0LdvX8TExMDW1ha2traIiYlBv379EBERke968+bNk/188+ZNdOzYEQsXLkTnzp3x448/amXGS5cuoX379jhy5AiePn2Kp0+f4siRI+jQoQMuXryY73oAsHnzZtnPjx49gpubG7p37w5XV1fcunUr3/X4Hhb+PVR0RkXnA9T/c1b3fJqQUdH5lJFRdAJl06FDByExMTHH8sTERKF9+/b5rte9e3fZz0OHDhV++uknQRAE4e7du0KvXr20MmPHjh2FJ0+e5Fj++PFjwcPDI9/1vsw4duxY4ciRI4IgCMKVK1eEfv365bse38PCv4eKzqjofIKg/p+zuufThIyKzqeMjGLjiP4LUqkUlpaWOZaXLFkSQiHv6Pvq1Ss0a9YMAODk5ISMjAytzJiVlYUKFSrkWF6xYkVIJJJC5QOAZ8+eoXv37gAAV1dXpKam5rsG38PCv4fKzKiIfID6f87qnk8TMiozn6Iyio3H6L/QokULDB8+HL1794a9vT2Aj8d/Dhw4gObNm+e7Xnx8PJYsWQJBEPDmzRtIJBLo6ekB+PgXVBsz1qxZE7NmzYK3t3e2fPv374eTk1O+6wHA69evsXv3bgAfjwt/riD/mPkeFv49VHRGRecD1P9zVvd8mpBR0fmUkVFsbPRfmDlzJo4fP45Dhw7hxYsXAAB7e3t07twZ3bp1y3c9Hx8f2c+9evVCcnIyrKysEB8fj5o1a2plxkWLFmHbtm2YNm0aXrx4AR0dHdjb28Pd3R1BQUH5rgcAzZo1w507dwAADRo0wMuXL2FjY4P4+PgCnRyjie+hnZ0dPDw81OY9VPTnrOh8gPp/zuqeTxMyKjqfMjKKTUdQxL4NIiIiUksc0edC0ZdqKPvSj8/99NNPBd5dpch6GRkZSEpKgq2tbbblDx8+RLVq1QqURdE1Hzx4AB0dHVSrVg1PnjzBpUuX4ODgIDseJ3a9L82aNQtz585VSC1l1FT0JUiKqPf69WuYmJjA0NAQAHDs2DHcvn0bjo6O8PLyEr3exYsX0aJFCxgYGOT7uaqoB3zcVX327FmULl0aderUwdmzZ3H9+nVUq1YNvXv3zvelj5/q2draom7duoWuB3zc1R4VFYWYmBjo6+ujSpUq8PT0RLFixfJdS5k1xcIR/RciIiKwbt06tGvXDnZ2dgCA2NhYnD9/HmPHjs33P2ZF1/uW1q1b49KlS6LWu3r1KiZNmgRBEFC+fHmsXLlSdtJWjx49cOTIkXznUHTNnTt3IiwsDFlZWRg2bBiOHTsGFxcXXL9+HQMGDEC/fv1ErbdkyZIcyyIiImR/X6ZOnZqvesqoOW/ePMycORPAx0uQxowZg9KlS+PFixdYunQpXF1dRa0HAF27dsWePXtgYmKCjRs34sqVK3Bzc8O1a9fg4OCAadOmiVrPyckJ5ubm8PT0RM+ePVG9evV8PV/Z9QBg7ty5uHPnDrKystCiRQv8+uuvsm2uXLkyZsyYobB6lSpVkv0dkNfx48excuVKVK9eHX/++SeaNWuGtLQ0PHz4EJs2bYKjo2O+6imrpqhUeIa/RlD0pRrKuPQjJCQk1z+LFy8W6tWrJ3q97777Trh3754gCIJw+PBhoU2bNrLfu3Xrlu96yqjp6ekpvH37VkhISBBq1aolxMbGCoLw8XNRh3q1a9cWAgIChLVr18r+NGjQQPZzQSi6pqIvQVLGJU1dunSR/dyjRw8hLS1NEARByMjIyPaYWPW6desm3Lt3T5g3b57QuHFjoUePHsKuXbuElJSUfNdSRj1BEIROnToJWVlZQlpamlC3bl0hNTVVEARBSE9PFzp37qwW9T79H/vs2TNh1KhRgiAIws8//yz4+Pjku56yaoqJl9d9QdGXaijj0o+dO3eiWLFiMDY2zvanRIkS0NHREb1eVlaWbCTRo0cPLF68GKNHj8atW7cKVE8ZNXV1dWFsbIxSpUqhXLlyKF26NADA0tJSLeodPnwY8fHxKFGiBMaOHYtx48bB1NQU48aNw7hx4/JdT1k1P1H0JUiKrPf69WsAgLGxsWy3q4GBQYEvAVRkPR0dHVSvXh0zZszAjz/+iOHDh+PixYto2bIlAgICRK8HAHp6etDT04OxsTGMjIxgYmICADA0NCzQbnZl1Pv0f2y5cuVkh0ibNm2KpKSkfNdTVk0x8Rj9FxR9qYYyLv1wcHCAu7t7rrvlCjITlKLrSSQSpKeny/4TbNSoEVasWIEJEyYgPT093/WUUfPzS2T8/f2zPZaZmSl6vcqVKyM8PBxbtmzBwIEDERwcXOAvScqqqehLkJRxSdPo0aMxcOBADB06FA0aNICfnx/c3d3x008/oWXLlqLX+/zLvoGBATp16oROnTohLi4OR48eFb0e8PGcoiVLluDt27eoUqUKFi5cCE9PT/z4448oVaqU6PXKli2LjRs3wtXVFadOnZKdryORSAr8ZU4ZNcXEY/RfkEqlOH78OKKiorJdquHh4YFu3boV6MQTRdYDPp4gV758eZQrVy7HY7///jvq168var0NGzagdu3aOb7I3Lp1C3PnzsXBgwfzVU8ZNQ8fPgx3d3eUKFEi2/JHjx7hwIED+b48TNH1PhcdHY1Zs2bhv//+w7Vr1wpcR9E1161bl+33vn37yi5BWrlyJRYvXixqvU9u376N8PBwPHr0CBKJBPb29ujSpQs6d+5coC86iqw3bdo0hISE5DuDquoBH/dgbNq0CTo6OhgzZgxOnz6NXbt2oWzZspg+fXqu/2+ost6rV6+waNEi3L9/H87Ozpg6dSosLS2RnJyMW7duFegLmDJqiomNnkgDZGVlISEhQXZCp7rWJCL1w2P0+fD333+rdT1l1FT3esqoqY719PX1ZQ1ZUfmUUfMTda+njJpFrZ4yaqp7PWXVVDY2+nxYvXq1WtdTRk11r6eMmkWtnjJqqns9ZdQsavWUUVPd6ymrprJx130ekpKSEBcXBwAoXbo0SpYsqVb1NCEjt1n96mlCRm6z+tXThIyasM1i4Vn3X3j27BlmzpyJu3fvwsbGBgDw8uVL1KhRA3Pnzs31bl2qrKcJGbnN6ldPEzJym9WvniZk1IRtFp04l++rL29vb+HYsWOCRCKRLZNIJMLRo0eF3r17i15PEzJym9WvniZk5DarXz1NyKgJ2yw2NvovuLu7F+gxVdVTRk11r6eMmkWtnjJqqns9ZdQsavWUUVPd6ymrpph4Mt4XLCwscPLkyWwTTwiCgOPHj8PMzEz0epqQkdusfvU0ISO3Wf3qaUJGTdhmsfFkvC88efIEs2fPxr1792R3SYuPj0f16tURHByMypUri1pPEzJym9WvniZk5DarXz1NyKgJ2yw2Nvo8vH79OtttZXObr17MepqQkdusfvU0ISO3Wf3qaUJGTdhmsbDRExERaTEeoyciItJibPRERERajI2eSE5r166Fo6Njjj+DBw+W6/nPnz+Ho6MjLl68qNygANq2bSvL5+zsDA8PD6xfv77Q94n/3OHDh+Ho6Ii3b98CABITE7F27Vo8f/4823rXr1+Ho6MjHjx4oLDX/prPP5tatWqhY8eO2LJlC7KysvJdKzQ0FNevX1dCSiLV4cx4RPlgamqKrVu35limjrp06YIBAwYgIyMD169fx/r165GWloZp06YppH7r1q2xf/9+GBkZAfjY6NetW4dGjRqhbNmysvVq1qyJ/fv3o3z58gp5XXkMHToU7u7u+PDhAy5duoTly5cjKysLY8aMyVedrVu3on///mjcuLGSkhIpHxs9UT7o6emhTp06YseQi42NjSxro0aNEBcXh3379mHq1KkFug/7lywtLeU6C9nExETl71mZMmVkr9mkSRM8fPgQx44dy3ejJ9IG3HVPpAAvX75EUFAQ3NzcUKtWLbi7u2PlypXf3FV+/vx5fPfdd6hTpw4aNmwILy8v/Prrr7LHpVIptmzZgvbt28PZ2Rnu7u44cuRIgTLWrFkT7969Q1JSEgDg2rVr8PLygouLC5o1a4bg4GDZbngAyMzMREhICFq3bg1nZ2e0aNECY8eOlW3T57vunz9/Dk9PTwDAwIEDZbvOgZy77gcMGAA/P78c+T691qcLgdLT07FkyRK0atUKzs7O6Nq1Ky5fvlygba9evbrsMqlPli1bBk9PT9StWxctW7ZEQEAAEhISZI+3bdsWycnJWLdunWx7Pu3Gl+dz+e233+Dj44N69eqhXr166NatG6KiogqUn6gwOKInyqcvj/Xq6ekhKSkJFhYWCAoKgpmZGZ48eYK1a9ciKSkJc+fOzbXOs2fPMGHCBAwYMABTpkxBRkYG7ty5gzdv3sjWmTdvHo4ePYoxY8agZs2a+OmnnzB9+nRYWFigTZs2+codExMDAwMDmJub4+HDh/D19UWzZs2wdu1axMbGYvny5fjvv/+wbds2AMDmzZtx4sQJBAQEoGzZskhISMCVK1cglUpz1LaxscGyZcswefJkzJo1CzVr1swzR8eOHbFkyRK8e/cOxsbGAD7OOnb69Gl07NhRtrfBz88Pt27dwvjx41G+fHlERUVh9OjROHToEJycnPK17bGxsdkOJwAfDzWMHDkSNjY2eP36NcLCwjBo0CCcPHkSurq6WLduHQYOHAh3d3d4eXkBAKpWrQrg259LWloaRo0aBTc3N4wdOxaCIODBgwdITU3NV24ihVD4pLpEWmrNmjWCg4NDjj8//fRTjnUzMzOF48ePC87OzkJ6erogCILw33//CQ4ODsKFCxcEQRCEqKgooVGjRnm+3pMnTwRHR0fh8OHD2ZZPmTJF+O67776atU2bNsKiRYuEzMxM4d27d8KFCxeEevXqCePHjxcEQRAmTpwotG/fXsjKypI959SpU4KDg4Pwxx9/CIIgCCNGjBAWLVqU52scOnRIcHBwENLS0gRBEIT79+8LDg4Owi+//JJtvV9++UVwcHAQ7t+/LwiCICQmJgpOTk7CyZMnZev88ccfgoODg3Dr1i1BEATh559/FhwcHITr169nq+Xj4yPbhrw4ODgI4eHhQmZmppCamiqcOHFCqFmzZrbX+1JWVpYQFxcnODg4CL/++qtseaNGjYQ1a9ZkW1eez+XWrVuCg4ODkJqa+tWsRKrAET1RPpiamiIsLCzbskqVKkEQBISHh+PAgQN4/vw50tPTZY/HxsbmeltLBwcHpKamYtq0afD09ES9evVkI1zg4651XV1dtG/fPttehKZNm+LUqVOQSCTQ09PLM2tYWFi2rG3atMGsWbMAALdu3YK7u3u257u7u0NfXx+///476tati+rVq2Pfvn2wsrKCq6srHB0dFXZsv0mTJoiMjETnzp0BAJGRkShfvjxcXFwAAD///DOsra1Rr169HNt++PDhb77GggULsGDBAtnvgwcPlr3WJ5cvX8bGjRvx8OFDpKWlyZY/efIEDRs2zLO2PJ9L+fLlYWxsjMmTJ6NXr15o1KiRRs6RTtqBjZ4oH/T09GTN6HPbt2/HkiVL4Ovri4YNG8LMzAy3b9/G3LlzszX9z1WuXBkbNmzAli1bMGLECOjr66N9+/b43//+B0tLSyQlJUEikaB+/fq5Pj8hIQGlS5fOM2vXrl0xcOBAGBoaokyZMjAxMcn23FKlSuXYNgsLC9mhgzFjxkBXVxd79+7FsmXLYGtri2HDhmHQoEHffJ++pVOnTpgzZw7S0tJgbGyM06dP47vvvpM9npSUhISEhFwPAXzty80nw4YNQ8eOHZGWlobw8HBs374dzZo1Q6tWrQB8/KIzZswYtGvXDr6+vrCysoKOjg569+6d5+f1eTZ5PpewsDCsXbsWEydOhCAIaN68OWbOnIly5cp9Mz+RIrHREynA6dOn4e7ujkmTJsmWPXr06JvPa926NVq3bo3U1FRcunQJCxcuxLx587By5UqYm5tDX18fe/fuzXUk/a0z3kuVKpXrlxIAsLa2RmJiYrZlEokEycnJMDc3BwAUK1YMEyZMwIQJE/DkyRPs27cPCxcuRKVKldCyZctvbtvXtG/fHsHBwTh37hzKlCmDly9fomPHjrLHzc3NYWtri/Xr1xeovr29vWzbGzRoAE9PTyxZsgQtW7aEjo4Ozp07h5IlS2LVqlWy9zYmJkau2vJ+LnXq1MG2bdvw4cMH/Pzzz1i8eDECAgJw4MCBAm0TUUGx0RMpwIcPH2BoaJht2YkTJ+R+vqmpKTw9PXHjxg38+eefAD5eFiaRSJCamormzZsrNG/t2rVx7tw5+Pv7y0bIZ8+eRVZWVq4j1YoVK2LatGnYvXs3Hj16lGujNzAwAIBvjoiBj82yRYsWiIqKgr29PapUqYLq1avLHm/atCnCwsJgbGyMKlWqFHQzZbkmTJiAiRMn4sKFC3Bzc8OHDx9gYGCQrVHn9nkZGBjk2J78fi7FixdH27Zt8fDhQ2zevLlQ20JUEGz0RArQrFkz7Ny5E7Vq1UL58uVx4sQJPH369KvP2bdvH27evAlXV1fY2NjgyZMnOH36NLp16wbg4679Pn36wN/fH8OGDYOLiwvS09Px8OFDPHnyJNsx6PwaPXo0evTogbFjx6Jv376Ii4vDsmXL0KJFC9StWxcAMHbsWNSsWRM1atRAsWLFcObMGUgkEjRo0CDXmvb29ihevDiOHj0KU1NT6Ovr57lHAfh49v3//vc/mJiYoH///tkea968OVq0aIGhQ4fC19cXVatWRVpaGqKjo5Geno6AgIB8ba+7uzsqV66Mbdu2wc3NDc2bN0d4eDgWLFiAtm3b4o8//sDx48dzPK9y5cq4fPkyXF1dYWxsjEqVKsn1uVy6dAmHDh2Cm5sb7O3tER8fj/3796NJkyb5yk2kCGz0RAowduxYJCUlYfXq1QA+7pqeMWMGRo0aledzHB0dceHCBSxatAhv3ryBtbU1vLy8MGHCBNk6s2fPRsWKFREREYE1a9bAxMQEVatWRa9evQqVt1q1aggNDcWKFSswbtw4mJiYoHPnzpgyZYpsnbp16yIyMhLbtm2DVCpF1apVsWbNmjybd7FixTBv3jysX78eAwYMQGZmJu7fv59nBjc3N8yaNQtJSUno1KlTtsd0dHSwbt06bNq0CeHh4YiNjYW5uTmqV6+OAQMG5Ht7dXV1MXLkSEybNg03b95Eq1atMHnyZOzatQsRERGoU6cONm/eDHd392zPmzp1KubOnYuRI0fi/fv32LFjBxo3bvzNz6V8+fLQ0dHBypUrkZiYCEtLS7Ru3Rr+/v75zk5UWLxNLRERkRbjzHhERERajI2eiIhIi7HRExERaTE2eiIiIi3GRk9ERKTF2OiJiIi0GBs9ERGRFmOjJyIi0mJs9ERERFrs/wHjNHHY9G3PYQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plot_roc_curve(fpr=fpr, tpr=tpr, label=\"AUC = %.3f\" % lr_auc)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qzm-vd3RX1al"
      },
      "source": [
        "AUC is quite good. i.e. 0.965. Based on the data being highly imbalanced, we'll only check the AUC metric in later algorithms."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "02YL3DV4X1al"
      },
      "source": [
        "#### Model Complexity"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OcOPiKWNX1al"
      },
      "source": [
        "Let's try to train the Logistic Regression models on the 2nd degree of polynomials. Not going further 2nd degree because features are already too much. Otherwise, computer gives the MemoryError."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:31:48.325959Z",
          "start_time": "2019-09-19T18:31:48.310330Z"
        },
        "id": "51qAxKAKX1al"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import PolynomialFeatures"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.095604Z",
          "start_time": "2019-09-19T18:31:48.325959Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xlWQoM7yX1al",
        "outputId": "80bb81ec-f24c-4649-9301-f24b2315dd52"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.9122902757791004, 0.9238498202685249)"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ],
      "source": [
        "# Getting the polynomial features\n",
        "poly = PolynomialFeatures(degree=2)\n",
        "xtrain_poly = poly.fit_transform(xtrain)\n",
        "xtest_poly = poly.fit_transform(xtest)\n",
        "\n",
        "# Training the model\n",
        "model = LogisticRegression()\n",
        "model.fit(xtrain_poly, ytrain)\n",
        "\n",
        "# Getting the probabilities\n",
        "train_prob = model.predict_proba(xtrain_poly)[:, 1]\n",
        "test_prob = model.predict_proba(xtest_poly)[:, 1]\n",
        "\n",
        "# Computing the ROC Score\n",
        "roc_auc_score(ytrain, train_prob), roc_auc_score(ytest, test_prob)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GBaihB9XX1am"
      },
      "source": [
        "Plotting ROC Curve for the Test data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.136492Z",
          "start_time": "2019-09-19T18:32:52.103581Z"
        },
        "id": "3yyeKeSbX1am"
      },
      "outputs": [],
      "source": [
        "fpr_poly, tpr_poly, threshold_poly = roc_curve(ytest, test_prob)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.609442Z",
          "start_time": "2019-09-19T18:32:52.138488Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "FnS0CFbQX1am",
        "outputId": "1a972d36-6aea-4b1e-c54b-51178a1c6886"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plot_roc_curve(fpr=fpr_poly, tpr=tpr_poly, label='AUC = %.3f' %  roc_auc_score(ytest, test_prob))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2zI6AIIvX1am"
      },
      "source": [
        "First degree is better in Logistic Regression case which gives 0.965 AUC Score."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v0M_xuSLX1an"
      },
      "source": [
        "Let's also check the Recall in case of model complexity."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.779543Z",
          "start_time": "2019-09-19T18:32:52.611435Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hMA_yAyxX1an",
        "outputId": "2e53a993-0a6d-49e7-9cd4-43cff18c4975"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.75"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ],
      "source": [
        "recall_score(ytest, model.predict(xtest_poly))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t7ItET2VX1an"
      },
      "source": [
        "Recall has increased when the model is made complex."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I-gUkSNCX1an"
      },
      "source": [
        "### FL + Support Vector Machine"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "79sFOI5jX1ao"
      },
      "source": [
        "Let's try the Support Vector Machine algorithm."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gbg2GqBfX1ao"
      },
      "source": [
        "Now, for support vector machines, we need to train the model after scaling the features. Let's first do that."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.785526Z",
          "start_time": "2019-09-19T18:32:52.781536Z"
        },
        "id": "NKA-WhltX1ao"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.799488Z",
          "start_time": "2019-09-19T18:32:52.787521Z"
        },
        "id": "KGc6KGdlX1ao"
      },
      "outputs": [],
      "source": [
        "mms = MinMaxScaler()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:52.855478Z",
          "start_time": "2019-09-19T18:32:52.801484Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "FS3geGPcX1ao",
        "outputId": "d5a39dca-6f47-42b3-d240-775cd78a04bd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
              "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
              "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
              "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
              "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
              "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
              "\n",
              "         V8        V9  ...  Amount  Amount-Bins_0 to 2854  \\\n",
              "0  0.098698  0.363787  ...  149.62                      1   \n",
              "1  0.085102 -0.255425  ...    2.69                      1   \n",
              "2  0.247676 -1.514654  ...  378.66                      1   \n",
              "3  0.377436 -1.387024  ...  123.50                      1   \n",
              "4 -0.270533  0.817739  ...   69.99                      1   \n",
              "\n",
              "   Amount-Bins_2854 to 5709  Amount-Bins_5709 to 8563  \\\n",
              "0                         0                         0   \n",
              "1                         0                         0   \n",
              "2                         0                         0   \n",
              "3                         0                         0   \n",
              "4                         0                         0   \n",
              "\n",
              "   Amount-Bins_8563 to 11418  Amount-Bins_11418 to 14272  \\\n",
              "0                          0                           0   \n",
              "1                          0                           0   \n",
              "2                          0                           0   \n",
              "3                          0                           0   \n",
              "4                          0                           0   \n",
              "\n",
              "   Amount-Bins_14272 to 17127  Amount-Bins_17127 to 19982  \\\n",
              "0                           0                           0   \n",
              "1                           0                           0   \n",
              "2                           0                           0   \n",
              "3                           0                           0   \n",
              "4                           0                           0   \n",
              "\n",
              "   Amount-Bins_19982 to 22836  Amount-Bins_22836 to 25691  \n",
              "0                           0                           0  \n",
              "1                           0                           0  \n",
              "2                           0                           0  \n",
              "3                           0                           0  \n",
              "4                           0                           0  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bef063c9-95d9-41da-b6b4-2728096616c9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Amount-Bins_0 to 2854</th>\n",
              "      <th>Amount-Bins_2854 to 5709</th>\n",
              "      <th>Amount-Bins_5709 to 8563</th>\n",
              "      <th>Amount-Bins_8563 to 11418</th>\n",
              "      <th>Amount-Bins_11418 to 14272</th>\n",
              "      <th>Amount-Bins_14272 to 17127</th>\n",
              "      <th>Amount-Bins_17127 to 19982</th>\n",
              "      <th>Amount-Bins_19982 to 22836</th>\n",
              "      <th>Amount-Bins_22836 to 25691</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>...</td>\n",
              "      <td>149.62</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>...</td>\n",
              "      <td>2.69</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>...</td>\n",
              "      <td>378.66</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>...</td>\n",
              "      <td>123.50</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>...</td>\n",
              "      <td>69.99</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bef063c9-95d9-41da-b6b4-2728096616c9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bef063c9-95d9-41da-b6b4-2728096616c9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bef063c9-95d9-41da-b6b4-2728096616c9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ],
      "source": [
        "# Let's first check the head of the explanatory variables which are to be scaled.\n",
        "X.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:53.252047Z",
          "start_time": "2019-09-19T18:32:52.857473Z"
        },
        "id": "ghJPbK_nX1ap"
      },
      "outputs": [],
      "source": [
        "X_scaled = mms.fit_transform(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:53.298912Z",
          "start_time": "2019-09-19T18:32:53.252047Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "5OKY5lHNX1ap",
        "outputId": "45ebbfd6-a362-4202-f426-5e7ca344bb8e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Time        V1        V2        V3        V4        V5        V6  \\\n",
              "0  0.000000  0.935192  0.766490  0.881365  0.313023  0.763439  0.267669   \n",
              "1  0.000000  0.978542  0.770067  0.840298  0.271796  0.766120  0.262192   \n",
              "2  0.000006  0.935217  0.753118  0.868141  0.268766  0.762329  0.281122   \n",
              "3  0.000006  0.941878  0.765304  0.868484  0.213661  0.765647  0.275559   \n",
              "4  0.000012  0.938617  0.776520  0.864251  0.269796  0.762975  0.263984   \n",
              "\n",
              "         V7        V8        V9  ...    Amount  Amount-Bins_0 to 2854  \\\n",
              "0  0.266815  0.786444  0.475312  ...  0.005824                    1.0   \n",
              "1  0.264875  0.786298  0.453981  ...  0.000105                    1.0   \n",
              "2  0.270177  0.788042  0.410603  ...  0.014739                    1.0   \n",
              "3  0.266803  0.789434  0.414999  ...  0.004807                    1.0   \n",
              "4  0.268968  0.782484  0.490950  ...  0.002724                    1.0   \n",
              "\n",
              "   Amount-Bins_2854 to 5709  Amount-Bins_5709 to 8563  \\\n",
              "0                       0.0                       0.0   \n",
              "1                       0.0                       0.0   \n",
              "2                       0.0                       0.0   \n",
              "3                       0.0                       0.0   \n",
              "4                       0.0                       0.0   \n",
              "\n",
              "   Amount-Bins_8563 to 11418  Amount-Bins_11418 to 14272  \\\n",
              "0                        0.0                         0.0   \n",
              "1                        0.0                         0.0   \n",
              "2                        0.0                         0.0   \n",
              "3                        0.0                         0.0   \n",
              "4                        0.0                         0.0   \n",
              "\n",
              "   Amount-Bins_14272 to 17127  Amount-Bins_17127 to 19982  \\\n",
              "0                         0.0                         0.0   \n",
              "1                         0.0                         0.0   \n",
              "2                         0.0                         0.0   \n",
              "3                         0.0                         0.0   \n",
              "4                         0.0                         0.0   \n",
              "\n",
              "   Amount-Bins_19982 to 22836  Amount-Bins_22836 to 25691  \n",
              "0                         0.0                         0.0  \n",
              "1                         0.0                         0.0  \n",
              "2                         0.0                         0.0  \n",
              "3                         0.0                         0.0  \n",
              "4                         0.0                         0.0  \n",
              "\n",
              "[5 rows x 39 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0455397-fa35-4ad9-ad6b-d10acef43102\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>...</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Amount-Bins_0 to 2854</th>\n",
              "      <th>Amount-Bins_2854 to 5709</th>\n",
              "      <th>Amount-Bins_5709 to 8563</th>\n",
              "      <th>Amount-Bins_8563 to 11418</th>\n",
              "      <th>Amount-Bins_11418 to 14272</th>\n",
              "      <th>Amount-Bins_14272 to 17127</th>\n",
              "      <th>Amount-Bins_17127 to 19982</th>\n",
              "      <th>Amount-Bins_19982 to 22836</th>\n",
              "      <th>Amount-Bins_22836 to 25691</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.935192</td>\n",
              "      <td>0.766490</td>\n",
              "      <td>0.881365</td>\n",
              "      <td>0.313023</td>\n",
              "      <td>0.763439</td>\n",
              "      <td>0.267669</td>\n",
              "      <td>0.266815</td>\n",
              "      <td>0.786444</td>\n",
              "      <td>0.475312</td>\n",
              "      <td>...</td>\n",
              "      <td>0.005824</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.978542</td>\n",
              "      <td>0.770067</td>\n",
              "      <td>0.840298</td>\n",
              "      <td>0.271796</td>\n",
              "      <td>0.766120</td>\n",
              "      <td>0.262192</td>\n",
              "      <td>0.264875</td>\n",
              "      <td>0.786298</td>\n",
              "      <td>0.453981</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000105</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.000006</td>\n",
              "      <td>0.935217</td>\n",
              "      <td>0.753118</td>\n",
              "      <td>0.868141</td>\n",
              "      <td>0.268766</td>\n",
              "      <td>0.762329</td>\n",
              "      <td>0.281122</td>\n",
              "      <td>0.270177</td>\n",
              "      <td>0.788042</td>\n",
              "      <td>0.410603</td>\n",
              "      <td>...</td>\n",
              "      <td>0.014739</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.000006</td>\n",
              "      <td>0.941878</td>\n",
              "      <td>0.765304</td>\n",
              "      <td>0.868484</td>\n",
              "      <td>0.213661</td>\n",
              "      <td>0.765647</td>\n",
              "      <td>0.275559</td>\n",
              "      <td>0.266803</td>\n",
              "      <td>0.789434</td>\n",
              "      <td>0.414999</td>\n",
              "      <td>...</td>\n",
              "      <td>0.004807</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.000012</td>\n",
              "      <td>0.938617</td>\n",
              "      <td>0.776520</td>\n",
              "      <td>0.864251</td>\n",
              "      <td>0.269796</td>\n",
              "      <td>0.762975</td>\n",
              "      <td>0.263984</td>\n",
              "      <td>0.268968</td>\n",
              "      <td>0.782484</td>\n",
              "      <td>0.490950</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002724</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 39 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0455397-fa35-4ad9-ad6b-d10acef43102')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b0455397-fa35-4ad9-ad6b-d10acef43102 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b0455397-fa35-4ad9-ad6b-d10acef43102');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ],
      "source": [
        "X_scaled = pd.DataFrame(data=X_scaled, columns=X.columns)\n",
        "X_scaled.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yNbzGG4RX1ap"
      },
      "source": [
        "Now, let's train test split on the scaled data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 88,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:53.533230Z",
          "start_time": "2019-09-19T18:32:53.298912Z"
        },
        "id": "Qemvs0ynX1ap"
      },
      "outputs": [],
      "source": [
        "xtrainS, xtestS, ytrainS, ytestS = train_test_split(\n",
        "    X_scaled, Y, random_state=42, test_size=0.30, shuffle=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:53.548858Z",
          "start_time": "2019-09-19T18:32:53.533230Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dG_IWq37X1ap",
        "outputId": "81299a56-d22a-4435-a7a8-c0b3544e33aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(199364, 39) (199364,)\n",
            "(85443, 39) (85443,)\n"
          ]
        }
      ],
      "source": [
        "print(xtrainS.shape, ytrainS.shape)\n",
        "print(xtestS.shape, ytestS.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:53.564473Z",
          "start_time": "2019-09-19T18:32:53.548858Z"
        },
        "id": "MdQoTednX1aq"
      },
      "outputs": [],
      "source": [
        "from sklearn.svm import SVC"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:32:53.580095Z",
          "start_time": "2019-09-19T18:32:53.564473Z"
        },
        "run_control": {
          "marked": false
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "gv4mGQUXX1aq",
        "outputId": "03a631df-fc53-4527-9737-895178e9610a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(kernel='linear', probability=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, probability=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;, probability=True)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ],
      "source": [
        "def test(global_model, test_loader):\n",
        "    \"\"\"This function test the global model on test data and returns test loss and test accuracy \"\"\"\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "    actuals, predictions = list(), list()\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = global_model(data)\n",
        "            binary_loss = torch.nn.BCEWithLogitsLoss()\n",
        "            target = target.unsqueeze(1)\n",
        "            target = target.float()\n",
        "            test_loss += binary_loss(output, target)\n",
        "            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "            actual = target.numpy()\n",
        "            pr = output.detach().numpy()\n",
        "            pr = pr.round()\n",
        "            predictions.append(pr)\n",
        "            actuals.append(actual)\n",
        "\n",
        "    test_loss /= len(test_loader.dataset)\n",
        "    predictions, actuals = vstack(predictions), vstack(actuals)\n",
        "    # calculate accuracy\n",
        "    acc = accuracy_score(actuals, predictions)\n",
        "    # calculate precision\n",
        "    prescision = precision_score(actuals, predictions)\n",
        "    # calculate recall\n",
        "    recall = recall_score(actuals, predictions)\n",
        "    # calculate f1\n",
        "    f1 = f1_score(actuals, predictions)\n",
        "    fed_acc.append(acc)\n",
        "    fed_pre.append(prescision)\n",
        "    fed_recall.append(recall)\n",
        "    fed_f1.append(f1)\n",
        "    print()\n",
        "    print(confusion_matrix(actuals, predictions))\n",
        "    return test_loss, acc, prescision, recall, f1\n",
        "svc_model = SVC(kernel='linear', probability=True)\n",
        "svc_model.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:02.474056Z",
          "start_time": "2019-09-19T18:32:53.580095Z"
        },
        "id": "qZZtjdVlX1aq"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:03.728275Z",
          "start_time": "2019-09-19T18:34:02.476201Z"
        },
        "id": "AFTLvFv-X1aq"
      },
      "outputs": [],
      "source": [
        "svc_pred = svc_model.predict(xtestS)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ul3QhmxoX1aq"
      },
      "source": [
        "Let's first check the recall score."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:03.759176Z",
          "start_time": "2019-09-19T18:34:03.728275Z"
        },
        "id": "Fj96YOhJX1ar"
      },
      "outputs": [],
      "source": [
        "svc_recall = recall_score(ytestS, svc_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:03.781311Z",
          "start_time": "2019-09-19T18:34:03.759176Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bwAjzFFnX1ar",
        "outputId": "97766a1a-76b5-4eb3-c845-829cc2b56f96"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8014705882352942"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ],
      "source": [
        "svc_recall"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EgHHpqI0X1ar"
      },
      "source": [
        "Recall quite increased in case of SVC."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 95,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:05.015960Z",
          "start_time": "2019-09-19T18:34:03.781311Z"
        },
        "id": "HyWQJrERX1ar"
      },
      "outputs": [],
      "source": [
        "svc_pred_prob = svc_model.predict_proba(xtestS)[:, 1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cUowilvKX1as"
      },
      "source": [
        "Now, let's draw the ROC Curve."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 96,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:05.186078Z",
          "start_time": "2019-09-19T18:34:05.015960Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "4lr76Rz8X1as",
        "outputId": "04311ec4-3d31-4591-e417-55361ee302c9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# First, getting the auc score\n",
        "svc_auc = roc_auc_score(ytestS, svc_pred_prob)\n",
        "\n",
        "# Now, let's get the fpr and tpr\n",
        "fpr, tpr, threshold = roc_curve(ytestS, svc_pred_prob)\n",
        "\n",
        "# Now, let's draw the curve\n",
        "plot_roc_curve(fpr, tpr, 'AUC: %.3f' % svc_auc)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ArIqwpNUX1as"
      },
      "source": [
        "The score AUC Score SVC gave is also pretty great. But it's still less than Logistic Regression Model. But the Recall increased significantly."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i8ZvARLwX1as"
      },
      "source": [
        "#### Tuning the Hyper-parameters"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LTYil3REX1as"
      },
      "source": [
        "Now, let's tune some of the hyper-parameters of SVM and then compare the scores."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 97,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:05.194015Z",
          "start_time": "2019-09-19T18:34:05.188033Z"
        },
        "id": "6XLV8qwDX1at"
      },
      "outputs": [],
      "source": [
        "# For Kernel = rbf\n",
        "tuned_rbf = {'kernel': ['rbf'], 'gamma': [\n",
        "    1e-2, 1e-3, 1e-4, 1e-5], 'C': [0.001, 0.10, 0.1, 10, 25, 50, 100, 1000]}\n",
        "\n",
        "# For kernel = sigmoid\n",
        "tuned_sigmoid = {'kernel': ['sigmoid'], 'gamma': [\n",
        "    1e-2, 1e-3, 1e-4, 1e-5], 'C': [0.001, 0.10, 0.1, 10, 25, 50, 100, 1000]}\n",
        "\n",
        "# For kernel = linear\n",
        "tuned_linear = {'kernel': ['linear'], 'C': [\n",
        "    0.001, 0.10, 0.1, 10, 25, 50, 100, 1000]}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 98,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:05.210972Z",
          "start_time": "2019-09-19T18:34:05.196011Z"
        },
        "id": "xVVEFwL6X1at"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 99,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T18:34:05.223937Z",
          "start_time": "2019-09-19T18:34:05.212965Z"
        },
        "id": "jMENqg-tX1at"
      },
      "outputs": [],
      "source": [
        "rs_rbf = RandomizedSearchCV(estimator=SVC(probability=True), \n",
        "        param_distributions=tuned_rbf, n_iter=500, n_jobs=4, scoring='roc_auc')\n",
        "\n",
        "rs_sigmoid = RandomizedSearchCV(estimator=SVC(probability=True), \n",
        "        param_distributions=tuned_sigmoid, n_iter=500, n_jobs=4, scoring='roc_auc')\n",
        "\n",
        "rs_linear = RandomizedSearchCV(estimator=SVC(probability=True), \n",
        "        param_distributions=tuned_linear, n_iter=500, n_jobs=4, scoring='roc_auc')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xWbKS-tZX1at"
      },
      "source": [
        "**For kernel rbf:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 101,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:20:42.469945Z",
          "start_time": "2019-09-19T18:34:05.225930Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "id": "roBJshD8X1at",
        "outputId": "b3607962-028e-4d9e-c94f-9b6c3288739b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(estimator=SVC(probability=True), n_iter=500, n_jobs=4,\n",
              "                   param_distributions={'C': [0.001, 0.1, 0.1, 10, 25, 50, 100,\n",
              "                                              1000],\n",
              "                                        'gamma': [0.01, 0.001, 0.0001, 1e-05],\n",
              "                                        'kernel': ['rbf']},\n",
              "                   scoring='roc_auc')"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(estimator=SVC(probability=True), n_iter=500, n_jobs=4,\n",
              "                   param_distributions={&#x27;C&#x27;: [0.001, 0.1, 0.1, 10, 25, 50, 100,\n",
              "                                              1000],\n",
              "                                        &#x27;gamma&#x27;: [0.01, 0.001, 0.0001, 1e-05],\n",
              "                                        &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n",
              "                   scoring=&#x27;roc_auc&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(estimator=SVC(probability=True), n_iter=500, n_jobs=4,\n",
              "                   param_distributions={&#x27;C&#x27;: [0.001, 0.1, 0.1, 10, 25, 50, 100,\n",
              "                                              1000],\n",
              "                                        &#x27;gamma&#x27;: [0.01, 0.001, 0.0001, 1e-05],\n",
              "                                        &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n",
              "                   scoring=&#x27;roc_auc&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(probability=True)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(probability=True)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ],
      "source": [
        "rs_rbf.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 102,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:20:42.489678Z",
          "start_time": "2019-09-19T19:20:42.479581Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "vGaKGNOXX1au",
        "outputId": "2ed364aa-9c65-4441-f317-c5952c45119e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1000, gamma=0.01, probability=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=1000, gamma=0.01, probability=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=1000, gamma=0.01, probability=True)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ],
      "source": [
        "rs_rbf.best_estimator_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:20:42.529758Z",
          "start_time": "2019-09-19T19:20:42.489678Z"
        },
        "id": "Fi3it2yLX1au"
      },
      "outputs": [],
      "source": [
        "svc_rbf_best_est = rs_rbf.best_estimator_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8jKwthhpX1au"
      },
      "source": [
        "Let's fit the model on the best rbf estimator."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:22:42.327793Z",
          "start_time": "2019-09-19T19:20:42.529758Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "JdJpBaVbX1au",
        "outputId": "ff755a44-8292-4521-cc6d-7c4348811532"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1000, gamma=0.01, probability=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=1000, gamma=0.01, probability=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=1000, gamma=0.01, probability=True)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ],
      "source": [
        "svc_rbf_best_est.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:22:44.304763Z",
          "start_time": "2019-09-19T19:22:42.329787Z"
        },
        "id": "cYjH0nI_X1av"
      },
      "outputs": [],
      "source": [
        "svc_rbf_best_est_pred = svc_rbf_best_est.predict(xtestS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:22:46.175032Z",
          "start_time": "2019-09-19T19:22:44.304763Z"
        },
        "id": "-LACnXh2X1av"
      },
      "outputs": [],
      "source": [
        "svc_rbf_best_est_pred_proba = svc_rbf_best_est.predict_proba(xtestS)[:, 1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T9ZXgvWjX1av"
      },
      "source": [
        "Getting the AUC Score."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 107,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:22:46.225197Z",
          "start_time": "2019-09-19T19:22:46.175032Z"
        },
        "id": "fUnlOJ8YX1av"
      },
      "outputs": [],
      "source": [
        "svc_rbf_auc = roc_auc_score(ytestS, svc_rbf_best_est_pred_proba)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y6yEBuk5X1av"
      },
      "source": [
        "Getting the Recall too."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:22:46.260106Z",
          "start_time": "2019-09-19T19:22:46.230182Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aBfTeYnQX1av",
        "outputId": "c87cae69-7248-4ca3-ee5e-dd034cebe58c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8308823529411765"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ],
      "source": [
        "svc_rbf_recall = recall_score(ytestS, svc_rbf_best_est_pred)\n",
        "svc_rbf_recall"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0-b2eo28X1aw"
      },
      "source": [
        "We can see that in this model, both recall and ROC Score are great. Let's draw the ROC Curve."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 109,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T19:22:46.559964Z",
          "start_time": "2019-09-19T19:22:46.266088Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "lNhxdEo5X1aw",
        "outputId": "5098b915-4908-4d7b-ea11-7bd14927c27f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fpr, tpr, threshold = roc_curve(ytestS, svc_rbf_best_est_pred_proba)\n",
        "plot_roc_curve(fpr, tpr, 'AUC = %.3f' % svc_rbf_auc)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Jra74w-TX1aw"
      },
      "source": [
        "Now, for kernel sigmoid."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:08:53.178201Z",
          "start_time": "2019-09-19T19:22:46.562956Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 118
        },
        "id": "o4Pw5e8IX1aw",
        "outputId": "a7bd7364-3627-4c03-fe71-25ebca10ba3a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomizedSearchCV(estimator=SVC(probability=True), n_iter=500, n_jobs=4,\n",
              "                   param_distributions={'C': [0.001, 0.1, 0.1, 10, 25, 50, 100,\n",
              "                                              1000],\n",
              "                                        'gamma': [0.01, 0.001, 0.0001, 1e-05],\n",
              "                                        'kernel': ['sigmoid']},\n",
              "                   scoring='roc_auc')"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(estimator=SVC(probability=True), n_iter=500, n_jobs=4,\n",
              "                   param_distributions={&#x27;C&#x27;: [0.001, 0.1, 0.1, 10, 25, 50, 100,\n",
              "                                              1000],\n",
              "                                        &#x27;gamma&#x27;: [0.01, 0.001, 0.0001, 1e-05],\n",
              "                                        &#x27;kernel&#x27;: [&#x27;sigmoid&#x27;]},\n",
              "                   scoring=&#x27;roc_auc&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(estimator=SVC(probability=True), n_iter=500, n_jobs=4,\n",
              "                   param_distributions={&#x27;C&#x27;: [0.001, 0.1, 0.1, 10, 25, 50, 100,\n",
              "                                              1000],\n",
              "                                        &#x27;gamma&#x27;: [0.01, 0.001, 0.0001, 1e-05],\n",
              "                                        &#x27;kernel&#x27;: [&#x27;sigmoid&#x27;]},\n",
              "                   scoring=&#x27;roc_auc&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(probability=True)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(probability=True)</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 110
        }
      ],
      "source": [
        "rs_sigmoid.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:08:53.198537Z",
          "start_time": "2019-09-19T20:08:53.183208Z"
        },
        "id": "ktCm7vddX1ax"
      },
      "outputs": [],
      "source": [
        "svc_sigmoid = rs_sigmoid.best_estimator_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:10:14.025945Z",
          "start_time": "2019-09-19T20:08:53.203556Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "G1Q2wWdfX1ax",
        "outputId": "97a63fe2-bde0-4d55-8923-01782381b7e1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1000, gamma=0.001, kernel='sigmoid', probability=True)"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=1000, gamma=0.001, kernel=&#x27;sigmoid&#x27;, probability=True)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=1000, gamma=0.001, kernel=&#x27;sigmoid&#x27;, probability=True)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ],
      "source": [
        "svc_sigmoid.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:10:17.653100Z",
          "start_time": "2019-09-19T20:10:14.030931Z"
        },
        "id": "OewhQjb5X1ax"
      },
      "outputs": [],
      "source": [
        "svc_sigmoid_pred = svc_sigmoid.predict(xtestS)\n",
        "svc_sigmoid_pred_proba = svc_sigmoid.predict_proba(xtestS)[:, 1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9GotbvA6X1ay"
      },
      "source": [
        "AUC:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:10:17.695173Z",
          "start_time": "2019-09-19T20:10:17.653100Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2F1q2kkhX1ay",
        "outputId": "620e6fed-4af0-4559-a8c3-73b5b035de0e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9618103369215271"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ],
      "source": [
        "svc_sigmoid_auc = roc_auc_score(ytestS, svc_sigmoid_pred_proba)\n",
        "svc_sigmoid_auc"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1uTHhhcMX1ay"
      },
      "source": [
        "Recall:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 115,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:10:17.732910Z",
          "start_time": "2019-09-19T20:10:17.698165Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "820tZu7kX1az",
        "outputId": "9fbb461d-f36d-4b8c-a301-843fe3b0fccd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8014705882352942"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ],
      "source": [
        "svc_sigmoid_recall = recall_score(ytestS, svc_sigmoid_pred)\n",
        "svc_sigmoid_recall"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:10:17.932864Z",
          "start_time": "2019-09-19T20:10:17.732910Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "tKcBRoxRX1az",
        "outputId": "3188bb5b-a22b-44f2-c6ad-402126f6016a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fpr, tpr, threshold = roc_curve(ytestS, svc_sigmoid_pred_proba)\n",
        "plot_roc_curve(fpr, tpr, 'AUC = %.3f' % svc_sigmoid_auc)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sNB4vXCYX1a0"
      },
      "source": [
        "Let's check for Linear kernel."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:59:56.290644Z",
          "start_time": "2019-09-19T20:10:17.937871Z"
        },
        "id": "ZdI3WtKmX1a0"
      },
      "outputs": [],
      "source": [
        "rs_linear.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T20:59:56.304607Z",
          "start_time": "2019-09-19T20:59:56.298622Z"
        },
        "id": "DLk4s0WpX1a1"
      },
      "outputs": [],
      "source": [
        "svc_linear = rs_linear.best_estimator_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:11.896073Z",
          "start_time": "2019-09-19T20:59:56.308595Z"
        },
        "id": "tk3JRq25X1a1"
      },
      "outputs": [],
      "source": [
        "svc_linear.fit(xtrainS, ytrainS)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D33LspdXX1a2"
      },
      "source": [
        "Getting the predictions and probabilities."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:15.311062Z",
          "start_time": "2019-09-19T21:01:11.899066Z"
        },
        "id": "aAC75OCzX1a2"
      },
      "outputs": [],
      "source": [
        "svc_linear_pred = svc_linear.predict(xtestS)\n",
        "svc_linear_pred_proba = svc_linear.predict_proba(xtestS)[:, 1]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pqr0dUlaX1a2"
      },
      "source": [
        "AUC and ROC Curve"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:15.564776Z",
          "start_time": "2019-09-19T21:01:15.317012Z"
        },
        "id": "aE6LM39WX1a3"
      },
      "outputs": [],
      "source": [
        "svc_linear_auc = roc_auc_score(ytestS, svc_linear_pred_proba)\n",
        "\n",
        "fpr, tpr, threshold = roc_curve(ytestS, svc_linear_pred_proba)\n",
        "plot_roc_curve(fpr, tpr, 'AUC = %.3f' % svc_linear_auc)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RvTgwaVyX1a3"
      },
      "source": [
        "Let's check the recall too."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:15.599684Z",
          "start_time": "2019-09-19T21:01:15.569764Z"
        },
        "id": "HkX8Z4OlX1a3"
      },
      "outputs": [],
      "source": [
        "svc_linear_recall = recall_score(ytestS, svc_linear_pred)\n",
        "svc_linear_recall"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z3qUzgGaX1a3"
      },
      "source": [
        "AUC is great in case of a linear kernel however it's less than that of rbf kernel. And its recall decreased quite a bit."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rV8lHH6GX1a3"
      },
      "source": [
        "### FL + Naive Bayes Algorithm"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p8EohSvSX1a4"
      },
      "source": [
        "Now, let's try the famous Naive Bayes Machine Learning Algorithm."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:15.636584Z",
          "start_time": "2019-09-19T21:01:15.602675Z"
        },
        "id": "VAlJpccEX1a4"
      },
      "outputs": [],
      "source": [
        "from sklearn.naive_bayes import GaussianNB"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:15.643566Z",
          "start_time": "2019-09-19T21:01:15.639577Z"
        },
        "run_control": {
          "marked": false
        },
        "id": "QkzuV1g6X1a4"
      },
      "outputs": [],
      "source": [
        "def test(global_model, test_loader):\n",
        "    \"\"\"This function test the global model on test data and returns test loss and test accuracy \"\"\"\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    correct = 0\n",
        "    actuals, predictions = list(), list()\n",
        "    with torch.no_grad():\n",
        "        for data, target in test_loader:\n",
        "            data, target = data.to(device), target.to(device)\n",
        "            output = global_model(data)\n",
        "            binary_loss = torch.nn.BCEWithLogitsLoss()\n",
        "            target = target.unsqueeze(1)\n",
        "            target = target.float()\n",
        "            test_loss += binary_loss(output, target)\n",
        "            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n",
        "            correct += pred.eq(target.view_as(pred)).sum().item()\n",
        "            actual = target.numpy()\n",
        "            pr = output.detach().numpy()\n",
        "            pr = pr.round()\n",
        "            predictions.append(pr)\n",
        "            actuals.append(actual)\n",
        "\n",
        "    test_loss /= len(test_loader.dataset)\n",
        "    predictions, actuals = vstack(predictions), vstack(actuals)\n",
        "    # calculate accuracy\n",
        "    acc = accuracy_score(actuals, predictions)\n",
        "    # calculate precision\n",
        "    prescision = precision_score(actuals, predictions)\n",
        "    # calculate recall\n",
        "    recall = recall_score(actuals, predictions)\n",
        "    # calculate f1\n",
        "    f1 = f1_score(actuals, predictions)\n",
        "    fed_acc.append(acc)\n",
        "    fed_pre.append(prescision)\n",
        "    fed_recall.append(recall)\n",
        "    fed_f1.append(f1)\n",
        "    print()\n",
        "    print(confusion_matrix(actuals, predictions))\n",
        "    return test_loss, acc, prescision, recall, f1\n",
        "\n",
        "nb = GaussianNB()\n",
        "nb.fit(xtrain, ytrain)\n",
        "nb_pred = nb.predict(xtest)\n",
        "nb_pred_proba = nb.predict_proba(xtest)[:, 1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 119,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:16.835351Z",
          "start_time": "2019-09-19T21:01:16.812411Z"
        },
        "id": "ghd_depWX1a5"
      },
      "outputs": [],
      "source": [
        "nb_auc = roc_auc_score(ytest, nb_pred)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:17.012463Z",
          "start_time": "2019-09-19T21:01:16.841408Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "wnNEFbS4X1a6",
        "outputId": "bfb404de-d5af-4e54-b02c-daed6ef64739"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fpr, tpr, threshold = roc_curve(ytestS, nb_pred_proba)\n",
        "plot_roc_curve(fpr, tpr, 'AUC = %.3f' % nb_auc)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2019-09-19T21:01:17.041346Z",
          "start_time": "2019-09-19T21:01:17.015415Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XqRC5OsoX1a6",
        "outputId": "71fc6972-d82a-46d9-c3db-7280018ac4ad"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6617647058823529"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ],
      "source": [
        "nb_recall = recall_score(ytest, nb_pred)\n",
        "nb_recall"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zjxmBIXBX1a6"
      },
      "source": [
        "Conclusion: Naive Bayes didn't perform well as compared to the other ones."
      ]
    }
  ],
  "metadata": {
    "hide_input": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": false,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {
        "height": "calc(100% - 180px)",
        "left": "10px",
        "top": "150px",
        "width": "279.273px"
      },
      "toc_section_display": true,
      "toc_window_display": false
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
